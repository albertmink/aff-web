"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaff_web"] = self["webpackChunkaff_web"] || []).push([["output_abap_cl_apc_tcp_client_manager_clas_locals_mjs"],{

/***/ "./output_abap/cl_apc_tcp_client_manager.clas.locals.mjs":
/*!***************************************************************!*\
  !*** ./output_abap/cl_apc_tcp_client_manager.clas.locals.mjs ***!
  \***************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lcl_client\": () => (/* binding */ lcl_client),\n/* harmony export */   \"lcl_message\": () => (/* binding */ lcl_message)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output_abap/cx_root.clas.mjs\"));\r\n// cl_apc_tcp_client_manager.clas.locals_imp.abap\r\nclass lcl_message {\r\n  static INTERNAL_TYPE = 'CLAS';\r\n  static IMPLEMENTED_INTERFACES = [\"IF_APC_WSP_MESSAGE\"];\r\n  async constructor_(INPUT) {\r\n    this.me = new abap.types.ABAPObject();\r\n    this.me.set(this);\r\n    this.mv_data = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    return this;\r\n  }\r\n  async if_apc_wsp_message$get_binary() {\r\n    let rv_binary = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    rv_binary.set(this.mv_data);\r\n    return rv_binary;\r\n  }\r\n  async if_apc_wsp_message$get_text() {\r\n    let r_message = new abap.types.String({qualifiedName: \"STRING\"});\r\n    abap.statements.assert(abap.compare.eq(new abap.types.Integer().set(1), new abap.types.Character(4).set('todo')));\r\n    return r_message;\r\n  }\r\n  async if_apc_wsp_message$set_binary(INPUT) {\r\n    let iv_binary = new abap.types.Hex();\r\n    if (INPUT && INPUT.iv_binary) {iv_binary = INPUT.iv_binary;}\r\n    this.mv_data.set(iv_binary);\r\n  }\r\n}\r\nabap.Classes['CLAS-CL_APC_TCP_CLIENT_MANAGER-LCL_MESSAGE'] = lcl_message;\r\nclass lcl_client {\r\n  static INTERNAL_TYPE = 'CLAS';\r\n  static IMPLEMENTED_INTERFACES = [\"IF_APC_WSP_CLIENT\",\"IF_APC_WSP_MESSAGE_MANAGER\"];\r\n  async constructor_(INPUT) {\r\n    this.me = new abap.types.ABAPObject();\r\n    this.me.set(this);\r\n    this.mv_host = new abap.types.String({qualifiedName: \"STRING\"});\r\n    this.mv_port = new abap.types.Integer({qualifiedName: \"I\"});\r\n    this.mo_handler = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_EVENT_HANDLER\"});\r\n    let iv_host = new abap.types.String({qualifiedName: \"STRING\"});\r\n    if (INPUT && INPUT.iv_host) {iv_host.set(INPUT.iv_host);}\r\n    let iv_port = new abap.types.Integer({qualifiedName: \"I\"});\r\n    if (INPUT && INPUT.iv_port) {iv_port.set(INPUT.iv_port);}\r\n    let io_handler = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_EVENT_HANDLER\"});\r\n    if (INPUT && INPUT.io_handler) {io_handler.set(INPUT.io_handler);}\r\n    abap.statements.assert(abap.compare.initial(iv_host) === false);\r\n    abap.statements.assert(abap.compare.initial(iv_port) === false);\r\n    abap.statements.assert(abap.compare.initial(io_handler) === false);\r\n    this.mv_host.set(iv_host);\r\n    this.mv_port.set(iv_port);\r\n    this.mo_handler.set(io_handler);\r\n    return this;\r\n  }\r\n  async if_apc_wsp_client$connect() {\r\n    const net = await __webpack_require__.e(/*! import() */ \"_5e1b\").then(__webpack_require__.t.bind(__webpack_require__, /*! net */ \"?5e1b\", 19));\r\n    this.client = net.createConnection({ port: this.mv_port.get(), host: this.mv_host.get()}, () => {this.mo_handler.get().if_apc_wsp_event_handler$on_open();});\r\n    this.client.on(\"data\", async (data) => {\r\n        const msg = await (new lcl_message().constructor_());\r\n        await msg.if_apc_wsp_message$set_binary({iv_binary: data.toString(\"hex\").toUpperCase()});\r\n        await this.mo_handler.get().if_apc_wsp_event_handler$on_message({i_message: msg});\r\n    });\r\n    this.client.on(\"end\",   async () => {this.mo_handler.get().if_apc_wsp_event_handler$on_close();});\r\n    this.client.on(\"error\", async (e) => {this.mo_handler.get().if_apc_wsp_event_handler$on_error();});\r\n    await new Promise(resolve => this.client.once(\"connect\", resolve));\r\n  }\r\n  async if_apc_wsp_client$close() {\r\n    this.client.destroy();\r\n  }\r\n  async if_apc_wsp_client$get_message_manager() {\r\n    let ri_manager = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE_MANAGER\"});\r\n    ri_manager.set(this.me);\r\n    return ri_manager;\r\n  }\r\n  async if_apc_wsp_message_manager$create_message() {\r\n    let ri_message = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE\"});\r\n    ri_message.set(await (new abap.Classes['CLAS-CL_APC_TCP_CLIENT_MANAGER-LCL_MESSAGE']()).constructor_());\r\n    return ri_message;\r\n  }\r\n  async if_apc_wsp_message_manager$send(INPUT) {\r\n    let ii_message = new abap.types.ABAPObject({qualifiedName: \"IF_APC_WSP_MESSAGE\"});\r\n    if (INPUT && INPUT.ii_message) {ii_message.set(INPUT.ii_message);}\r\n    const val = await ii_message.get().if_apc_wsp_message$get_binary();\r\n    this.client.write(Buffer.from(val.get(), \"hex\"), \"binary\");\r\n  }\r\n}\r\nabap.Classes['CLAS-CL_APC_TCP_CLIENT_MANAGER-LCL_CLIENT'] = lcl_client;\r\n\r\n//# sourceMappingURL=cl_apc_tcp_client_manager.clas.locals.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://aff-web/./output_abap/cl_apc_tcp_client_manager.clas.locals.mjs?");

/***/ })

}]);
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaff_web"] = self["webpackChunkaff_web"] || []).push([["output_abap_cl_abap_unit_assert_clas_locals_mjs"],{

/***/ "./output_abap/cl_abap_unit_assert.clas.locals.mjs":
/*!*********************************************************!*\
  !*** ./output_abap/cl_abap_unit_assert.clas.locals.mjs ***!
  \*********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lcl_dump\": () => (/* binding */ lcl_dump)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output_abap/cx_root.clas.mjs\"));\r\n// cl_abap_unit_assert.clas.locals_imp.abap\r\nclass lcl_dump {\r\n  static INTERNAL_TYPE = 'CLAS';\r\n  static IMPLEMENTED_INTERFACES = [];\r\n  async constructor_(INPUT) {\r\n    this.me = new abap.types.ABAPObject();\r\n    this.me.set(this);\r\n    return this;\r\n  }\r\n  async to_string(INPUT) {\r\n    return lcl_dump.to_string(INPUT);\r\n  }\r\n  static async to_string(INPUT) {\r\n    let rv_str = new abap.types.String({qualifiedName: \"STRING\"});\r\n    let iv_val = new abap.types.Character(4);\r\n    if (INPUT && INPUT.iv_val) {iv_val = INPUT.iv_val;}\r\n    let lv_type = new abap.types.Character(1, {});\r\n    abap.statements.describe({field: iv_val, type: lv_type});\r\n    let unique164 = lv_type;\r\n    if (abap.compare.eq(unique164, new abap.types.Character(1).set('u')) || abap.compare.eq(unique164, new abap.types.Character(1).set('v'))) {\r\n      rv_str.set((await this.dump_structure({iv_val: iv_val})));\r\n    } else if (abap.compare.eq(unique164, new abap.types.Character(1).set('h'))) {\r\n      rv_str.set(new abap.types.String().set(`[itab]`));\r\n    } else {\r\n      rv_str.set(new abap.types.String().set(`${abap.templateFormatting(iv_val)}`));\r\n    }\r\n    return rv_str;\r\n  }\r\n  async dump_structure(INPUT) {\r\n    return lcl_dump.dump_structure(INPUT);\r\n  }\r\n  static async dump_structure(INPUT) {\r\n    let rv_str = new abap.types.String({qualifiedName: \"STRING\"});\r\n    let iv_val = new abap.types.Character(4);\r\n    if (INPUT && INPUT.iv_val) {iv_val = INPUT.iv_val;}\r\n    let lt_components = new abap.types.Table(new abap.types.String({qualifiedName: \"STRING\"}), {\"withHeader\":false,\"primaryKey\":{\"name\":\"primary_key\",\"type\":\"STANDARD\",\"isUnique\":false,\"keyFields\":[]},\"secondary\":[]}, \"\");\r\n    let lv_name = new abap.types.String({qualifiedName: \"STRING\"});\r\n    let lv_str = new abap.types.String({qualifiedName: \"STRING\"});\r\n    let fs_fs_ = new abap.types.FieldSymbol(new abap.types.Character(4));\r\n    Object.keys(iv_val.get()).forEach((name) => lt_components.append(new abap.types.String().set(name)));\r\n    for await (const unique165 of abap.statements.loop(lt_components)) {\r\n      lv_name.set(unique165);\r\n      if (abap.compare.ne(rv_str, new abap.types.Character(0).set(''))) {\r\n        rv_str.set(abap.operators.concat(rv_str,new abap.types.String().set(`, `)));\r\n      }\r\n      abap.statements.assign({component: lv_name, target: fs_fs_, source: iv_val});\r\n      abap.statements.assert(abap.compare.eq(abap.builtin.sy.get().subrc, new abap.types.Integer().set(0)));\r\n      lv_str.set((await this.to_string({iv_val: fs_fs_})));\r\n      rv_str.set(abap.operators.concat(rv_str,abap.operators.concat(lv_name,abap.operators.concat(new abap.types.String().set(`: `),new abap.types.String().set(`${abap.templateFormatting(lv_str)}`)))));\r\n    }\r\n    return rv_str;\r\n  }\r\n}\r\nabap.Classes['CLAS-CL_ABAP_UNIT_ASSERT-LCL_DUMP'] = lcl_dump;\r\n\r\n//# sourceMappingURL=cl_abap_unit_assert.clas.locals.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://aff-web/./output_abap/cl_abap_unit_assert.clas.locals.mjs?");

/***/ })

}]);
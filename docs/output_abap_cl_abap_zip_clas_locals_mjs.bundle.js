"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkaff_web"] = self["webpackChunkaff_web"] || []).push([["output_abap_cl_abap_zip_clas_locals_mjs"],{

/***/ "./output_abap/cl_abap_zip.clas.locals.mjs":
/*!*************************************************!*\
  !*** ./output_abap/cl_abap_zip.clas.locals.mjs ***!
  \*************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"lcl_stream\": () => (/* binding */ lcl_stream)\n/* harmony export */ });\nconst {cx_root} = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./cx_root.clas.mjs */ \"./output_abap/cx_root.clas.mjs\"));\r\n// cl_abap_zip.clas.locals_imp.abap\r\nclass lcl_stream {\r\n  static INTERNAL_TYPE = 'CLAS';\r\n  static IMPLEMENTED_INTERFACES = [];\r\n  async constructor_(INPUT) {\r\n    this.me = new abap.types.ABAPObject();\r\n    this.me.set(this);\r\n    this.mv_xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    return this;\r\n  }\r\n  async append(INPUT) {\r\n    let iv_xstr = new abap.types.Hex();\r\n    if (INPUT && INPUT.iv_xstr) {iv_xstr = INPUT.iv_xstr;}\r\n    abap.statements.concatenate({source: [this.mv_xstr, iv_xstr], target: this.mv_xstr});\r\n  }\r\n  async get() {\r\n    let rv_xstr = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    rv_xstr.set(this.mv_xstr);\r\n    return rv_xstr;\r\n  }\r\n  async append_date(INPUT) {\r\n    let iv_date = new abap.types.Date({qualifiedName: \"D\"});\r\n    if (INPUT && INPUT.iv_date) {iv_date.set(INPUT.iv_date);}\r\n  }\r\n  async append_time(INPUT) {\r\n    let iv_time = new abap.types.Time({qualifiedName: \"T\"});\r\n    if (INPUT && INPUT.iv_time) {iv_time.set(INPUT.iv_time);}\r\n  }\r\n  async append_int2(INPUT) {\r\n    let iv_int = new abap.types.Integer({qualifiedName: \"I\"});\r\n    if (INPUT && INPUT.iv_int) {iv_int.set(INPUT.iv_int);}\r\n    let lv_hex = new abap.types.Hex();\r\n    lv_hex.set(iv_int);\r\n    await this.append({iv_xstr: lv_hex});\r\n  }\r\n  async append_int4(INPUT) {\r\n    let iv_int = new abap.types.Integer({qualifiedName: \"I\"});\r\n    if (INPUT && INPUT.iv_int) {iv_int.set(INPUT.iv_int);}\r\n    let lv_hex = new abap.types.Hex({length: 2});\r\n    lv_hex.set(iv_int);\r\n    await this.append({iv_xstr: lv_hex});\r\n  }\r\n  async append_crc(INPUT) {\r\n    let rv_crc = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    let iv_xstring = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n    if (INPUT && INPUT.iv_xstring) {iv_xstring.set(INPUT.iv_xstring);}\r\n    let magic_nr = new abap.types.Hex({length: 4});\r\n    magic_nr.set('EDB88320');\r\n    let mffffffff = new abap.types.Hex({length: 4});\r\n    mffffffff.set('FFFFFFFF');\r\n    let m7fffffff = new abap.types.Hex({length: 4});\r\n    m7fffffff.set('7FFFFFFF');\r\n    let m00ffffff = new abap.types.Hex({length: 4});\r\n    m00ffffff.set('00FFFFFF');\r\n    let m000000ff = new abap.types.Hex({length: 4});\r\n    m000000ff.set('000000FF');\r\n    let m000000 = new abap.types.Hex({length: 3});\r\n    m000000.set('000000');\r\n    let cindex = new abap.types.Hex({length: 4});\r\n    let low_bit = new abap.types.Hex({length: 4});\r\n    let len = new abap.types.Integer({qualifiedName: \"I\"});\r\n    let nindex = new abap.types.Integer({qualifiedName: \"I\"});\r\n    let crc = new abap.types.Hex({length: 4});\r\n    crc.set(mffffffff);\r\n    let x4 = new abap.types.Hex({length: 4});\r\n    let idx = new abap.types.Hex({length: 4});\r\n    if (abap.compare.eq(abap.builtin.xstrlen({val: lcl_stream.crc32_map}), new abap.types.Integer().set(0))) {\r\n      const indexBackup1 = abap.builtin.sy.get().index.get();\r\n      const unique79 = new abap.types.Integer().set(256).get();\r\n      for (let unique80 = 0; unique80 < unique79; unique80++) {\r\n        abap.builtin.sy.get().index.set(unique80 + 1);\r\n        cindex.set(abap.operators.minus(abap.builtin.sy.get().index,new abap.types.Integer().set(1)));\r\n        const indexBackup2 = abap.builtin.sy.get().index.get();\r\n        const unique81 = new abap.types.Integer().set(8).get();\r\n        for (let unique82 = 0; unique82 < unique81; unique82++) {\r\n          abap.builtin.sy.get().index.set(unique82 + 1);\r\n          low_bit.set(new abap.types.Character(8).set('00000001'));\r\n          low_bit.set(abap.operators.bitand(cindex,low_bit));\r\n          cindex.set(abap.operators.div(cindex,new abap.types.Integer().set(2)));\r\n          cindex.set(abap.operators.bitand(cindex,m7fffffff));\r\n          if (abap.compare.initial(low_bit) === false) {\r\n            cindex.set(abap.operators.bitxor(cindex,magic_nr));\r\n          }\r\n        }\r\n        abap.builtin.sy.get().index.set(indexBackup2);\r\n        abap.statements.concatenate({source: [lcl_stream.crc32_map, cindex], target: lcl_stream.crc32_map});\r\n      }\r\n      abap.builtin.sy.get().index.set(indexBackup1);\r\n    }\r\n    len.set(abap.builtin.xstrlen({val: iv_xstring}));\r\n    const indexBackup3 = abap.builtin.sy.get().index.get();\r\n    const unique83 = len.get();\r\n    for (let unique84 = 0; unique84 < unique83; unique84++) {\r\n      abap.builtin.sy.get().index.set(unique84 + 1);\r\n      nindex.set(abap.operators.minus(abap.builtin.sy.get().index,new abap.types.Integer().set(1)));\r\n      abap.statements.concatenate({source: [m000000, iv_xstring.getOffset({offset: nindex, length: 1})], target: idx});\r\n      idx.set(abap.operators.bitand(abap.operators.bitxor(crc,idx),m000000ff));\r\n      idx.set(abap.operators.multiply(idx,new abap.types.Integer().set(4)));\r\n      x4.set(lcl_stream.crc32_map.getOffset({offset: idx, length: 4}));\r\n      crc.set(abap.operators.div(crc,new abap.types.Integer().set(256)));\r\n      crc.set(abap.operators.bitand(crc,m00ffffff));\r\n      crc.set(abap.operators.bitxor(x4,crc));\r\n    }\r\n    abap.builtin.sy.get().index.set(indexBackup3);\r\n    crc.set(abap.operators.bitxor(crc,mffffffff));\r\n    rv_crc.set(crc);\r\n    await this.append({iv_xstr: rv_crc});\r\n    return rv_crc;\r\n  }\r\n}\r\nabap.Classes['CLAS-CL_ABAP_ZIP-LCL_STREAM'] = lcl_stream;\r\nlcl_stream.crc32_map = new abap.types.XString({qualifiedName: \"XSTRING\"});\r\n\r\n//# sourceMappingURL=cl_abap_zip.clas.locals.mjs.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://aff-web/./output_abap/cl_abap_zip.clas.locals.mjs?");

/***/ })

}]);
const {zcl_aff_writer} = await import("./zcl_aff_writer.clas.mjs");
const {zcl_aff_writer_json_schema} = await import("./zcl_aff_writer_json_schema.clas.mjs");
const {cx_root} = await import("./cx_root.clas.mjs");
// zcl_aff_writer_json_schema.clas.testclasses.abap

class ltcl_json_writer {
  static INTERNAL_TYPE = 'CLAS';
  static INTERNAL_NAME = 'CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER';
  static IMPLEMENTED_INTERFACES = [];
  static ATTRIBUTES = {"CUT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA", RTTIName: "\\CLASS=ZCL_AFF_WRITER_JSON_SCHEMA"});}, "visibility": "I", "is_constant": " ", "is_class": " "},
  "TEST_GENERATOR": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_GENERATOR", RTTIName: "\\INTERFACE=ZIF_AFF_GENERATOR"});}, "visibility": "I", "is_constant": " ", "is_class": " "},
  "SCHEMA_ID": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "visibility": "I", "is_constant": "X", "is_class": "X"}};
  static METHODS = {"USE_DDIC_INFO_FOR_ELEMENT": {"visibility": "I", "parameters": {}},
  "DATE_TIME_ELEMENT": {"visibility": "I", "parameters": {}},
  "STRUCTURE_IN_TABLE": {"visibility": "I", "parameters": {}},
  "NESTED_TABLE": {"visibility": "I", "parameters": {}},
  "USE_DDIC_INFO_FOR_MAX_LENGTH": {"visibility": "I", "parameters": {}},
  "MAX_LENGTH": {"visibility": "I", "parameters": {}},
  "NUMBER_MAX_VALUE": {"visibility": "I", "parameters": {}},
  "ENUM_ELEMENT": {"visibility": "I", "parameters": {}},
  "DATE_TIME_FROM_ABAP_TO_JSON": {"visibility": "I", "parameters": {}},
  "VALIDATE_INVALID_JSON_SCHEMA": {"visibility": "I", "parameters": {}},
  "VALIDATE_VALID_JSON_SCHEMA": {"visibility": "I", "parameters": {}},
  "NESTED_BOOLEAN": {"visibility": "I", "parameters": {}},
  "NESTED_TABLE_W_SAME_FIELD_NAME": {"visibility": "I", "parameters": {}},
  "MULTIPLE_OF_WARNING": {"visibility": "I", "parameters": {}},
  "SETUP": {"visibility": "I", "parameters": {}}};
  constructor() {
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
    this.cut = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA", RTTIName: "\\CLASS=ZCL_AFF_WRITER_JSON_SCHEMA"});
    this.test_generator = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_GENERATOR", RTTIName: "\\INTERFACE=ZIF_AFF_GENERATOR"});
    this.schema_id = ltcl_json_writer.schema_id;
  }
  async constructor_(INPUT) {
    if (super.constructor_) { await super.constructor_(INPUT); }
    return this;
  }
  async setup() {
    this.cut.set(await (new abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA']()).constructor_({schema_id: ltcl_json_writer.schema_id}));
    this.test_generator.set(await (new abap.Classes['ZCL_AFF_GENERATOR']()).constructor_({writer: this.cut}));
  }
  async enum_element() {
    
    let undefined = new abap.types.Structure({"general": new abap.types.String({qualifiedName: "CATEGORY"}), "classic_badi": new abap.types.String({qualifiedName: "CATEGORY"})}, undefined, undefined, {}, {});
    undefined.get().general.set(new abap.types.Character(1).set('1'));
    undefined.get().classic_badi.set(new abap.types.Character(1).set('2'));
    let temp45 = new abap.types.String({qualifiedName: "CATEGORY"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp46 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp30 = new abap.types.String({qualifiedName: "STRING"});
    let temp31 = new abap.types.String({qualifiedName: "STRING"});
    let temp32 = new abap.types.String({qualifiedName: "STRING"});
    let temp47 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp45);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp45})));
    abap.statements.clear(temp46);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp46});
    temp30.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp30, table: temp46});
    temp31.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp31, table: temp46});
    temp32.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp32, table: temp46});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp46});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 30`), table: temp46});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp46});
    abap.statements.insertInternal({data: temp47, table: temp46});
    exp_schema.set(temp46);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async date_time_element() {
    let temp48 = new abap.types.Date({qualifiedName: "D"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp49 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp33 = new abap.types.String({qualifiedName: "STRING"});
    let temp34 = new abap.types.String({qualifiedName: "STRING"});
    let temp35 = new abap.types.String({qualifiedName: "STRING"});
    let temp50 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp48);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp48})));
    abap.statements.clear(temp49);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp49});
    temp33.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp33, table: temp49});
    temp34.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp34, table: temp49});
    temp35.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp35, table: temp49});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp49});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "format" :"date-time"`), table: temp49});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp49});
    abap.statements.insertInternal({data: temp50, table: temp49});
    exp_schema.set(temp49);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async use_ddic_info_for_element() {
    let temp51 = new abap.types.Character(1, {"qualifiedName":"ABAP_LANGUAGE_VERSION","ddicName":"ABAP_LANGUAGE_VERSION"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp52 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp36 = new abap.types.String({qualifiedName: "STRING"});
    let temp37 = new abap.types.String({qualifiedName: "STRING"});
    let temp38 = new abap.types.String({qualifiedName: "STRING"});
    let temp53 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp51);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp51})));
    abap.statements.clear(temp52);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp52});
    temp36.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp36, table: temp52});
    temp37.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp37, table: temp52});
    temp38.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp38, table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "ABAP Language Version",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "enum": [`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "standardAbap",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "abapForKeyUsers",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "abapForCloudDevelopment"`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ],`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "enumDescriptions": [`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "StandardABAP",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "ABAP for Key Users",`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "ABAP for Cloud Development"`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ]`), table: temp52});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp52});
    abap.statements.insertInternal({data: temp53, table: temp52});
    exp_schema.set(temp52);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async use_ddic_info_for_max_length() {
    let temp54 = new abap.types.Character(36, {"qualifiedName":"SYSUUID_C36","ddicName":"SYSUUID_C36"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp55 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp39 = new abap.types.String({qualifiedName: "STRING"});
    let temp40 = new abap.types.String({qualifiedName: "STRING"});
    let temp41 = new abap.types.String({qualifiedName: "STRING"});
    let temp56 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp54);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp54})));
    abap.statements.clear(temp55);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp55});
    temp39.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp39, table: temp55});
    temp40.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp40, table: temp55});
    temp41.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp41, table: temp55});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "16 byte UUID in 36 chars according to RFC4122",`), table: temp55});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp55});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 36`), table: temp55});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp55});
    abap.statements.insertInternal({data: temp56, table: temp55});
    exp_schema.set(temp55);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async structure_in_table() {
    
    let temp57 = abap.types.TableFactory.construct(new abap.types.Structure({"my_element": new abap.types.String({qualifiedName: "MY_STRUCTURE-MY_ELEMENT"})}, "my_structure", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "my_table");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp58 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp42 = new abap.types.String({qualifiedName: "STRING"});
    let temp43 = new abap.types.String({qualifiedName: "STRING"});
    let temp44 = new abap.types.String({qualifiedName: "STRING"});
    let temp59 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp57);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp57})));
    abap.statements.clear(temp58);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp58});
    temp42.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp42, table: temp58});
    temp43.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp43, table: temp58});
    temp44.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp44, table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "myElement": {`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string"`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp58});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp58});
    abap.statements.insertInternal({data: temp59, table: temp58});
    exp_schema.set(temp58);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async nested_boolean() {
    let temp60 = new abap.types.Structure({"hide_column": new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"})}, "ty_list_report", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp61 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp45 = new abap.types.String({qualifiedName: "STRING"});
    let temp46 = new abap.types.String({qualifiedName: "STRING"});
    let temp47 = new abap.types.String({qualifiedName: "STRING"});
    let temp62 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp60);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp60})));
    abap.statements.clear(temp61);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp61});
    temp45.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp45, table: temp61});
    temp46.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp46, table: temp61});
    temp47.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp47, table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "hideColumn": {`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "boolean"`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp61});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp61});
    abap.statements.insertInternal({data: temp62, table: temp61});
    exp_schema.set(temp61);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async nested_table() {
    
    
    let temp63 = abap.types.TableFactory.construct(abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "nested_table"), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "first_table");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp64 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp48 = new abap.types.String({qualifiedName: "STRING"});
    let temp49 = new abap.types.String({qualifiedName: "STRING"});
    let temp50 = new abap.types.String({qualifiedName: "STRING"});
    let temp65 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp63);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp63})));
    abap.statements.clear(temp64);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp64});
    temp48.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp48, table: temp64});
    temp49.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp49, table: temp64});
    temp50.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp50, table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "array",`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "items": {`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string"`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp64});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp64});
    abap.statements.insertInternal({data: temp65, table: temp64});
    exp_schema.set(temp64);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async nested_table_w_same_field_name() {
    let temp66 = new abap.types.Structure({"field_name": abap.types.TableFactory.construct(new abap.types.Structure({"field_name": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "ty_nested-field_name")}, "ty_nested", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "ty_main-field_name")}, "ty_main", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp67 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp66);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp66})));
    abap.statements.clear(temp67);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$comment": "This file is autogenerated, do not edit manually, see https://github.com/SAP/abap-file-formats for more information.",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$schema": "https://json-schema.org/draft/2020-12/schema",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$id": "schema/id.json",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "object",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "properties": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "fieldName": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "array",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "items": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "fieldName": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "array",`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "items": {`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "type": "string"`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`          }`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "additionalProperties": false`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp67});
    abap.statements.insertInternal({data: new abap.types.String().set(``), table: temp67});
    exp_schema.set(temp67);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async max_length() {
    let temp69 = new abap.types.Structure({"name": new abap.types.Character(30, {"qualifiedName":"component_description-name"}), "description": new abap.types.Character(60, {"qualifiedName":"component_description-description"}), "numeric_text": new abap.types.Numc({length: 10, qualifiedName: "component_description-numeric_text"})}, "component_description", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp70 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp51 = new abap.types.String({qualifiedName: "STRING"});
    let temp52 = new abap.types.String({qualifiedName: "STRING"});
    let temp53 = new abap.types.String({qualifiedName: "STRING"});
    let temp71 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp69);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp69})));
    abap.statements.clear(temp70);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp70});
    temp51.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp51, table: temp70});
    temp52.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp52, table: temp70});
    temp53.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp53, table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "name": {`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 30`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": {`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 60`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "numericText": {`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 10,`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "pattern": "^[0-9]+$" `), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp70});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp70});
    abap.statements.insertInternal({data: temp71, table: temp70});
    exp_schema.set(temp70);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async number_max_value() {
    let temp72 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "COMPONENT_DESCRIPTION-INTEGER"}), "integer8": new abap.types.Integer8({qualifiedName: "COMPONENT_DESCRIPTION-INTEGER8"}), "decfloat16": new abap.types.typeTodoDecFloat16Type(), "decfloat34": new abap.types.DecFloat34(), "ftype": new abap.types.Float({qualifiedName: "COMPONENT_DESCRIPTION-FTYPE"}), "packed": new abap.types.Packed({length: 14, decimals: 2, qualifiedName: "component_description-packed"}), "integer2": new abap.types.Integer({qualifiedName: "INT2"})}, "component_description", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp73 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp54 = new abap.types.String({qualifiedName: "STRING"});
    let temp55 = new abap.types.String({qualifiedName: "STRING"});
    let temp56 = new abap.types.String({qualifiedName: "STRING"});
    let temp74 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp72);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp72})));
    abap.statements.clear(temp73);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp73});
    temp54.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp54, table: temp73});
    temp55.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp55, table: temp73});
    temp56.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp56, table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "integer": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "integer8": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -9223372036854775808,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 9223372036854775807`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "decfloat16": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "number",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -9.999999999999999e384,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 9.999999999999999e384`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "decfloat34": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "number",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -9.999999999999999999999999999999999e6144,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 9.999999999999999999999999999999999e6144`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "ftype": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "number",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -1.7976931348623157e308,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 1.7976931348623157e308`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "packed": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "number",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -9999999999999999999999999.99,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 9999999999999999999999999.99`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "integer2": {`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "2ByteSignedInteger",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -32768,`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 32767`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp73});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp73});
    abap.statements.insertInternal({data: temp74, table: temp73});
    exp_schema.set(temp73);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async date_time_from_abap_to_json() {
    let abap_date = new abap.types.String({qualifiedName: "STRING"});
    let temp75 = new abap.types.Date({qualifiedName: "D"});
    let temp57 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let element_description = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let exp_json = new abap.types.String({qualifiedName: "STRING"});
    let act_json = new abap.types.String({qualifiedName: "STRING"});
    let abap_date_year = new abap.types.String({qualifiedName: "STRING"});
    let abap_date_year_month = new abap.types.String({qualifiedName: "STRING"});
    let abap_time = new abap.types.String({qualifiedName: "STRING"});
    let temp76 = new abap.types.Time({qualifiedName: "T"});
    let temp58 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let abap_time_incomplete = new abap.types.String({qualifiedName: "STRING"});
    let abap_utclong = new abap.types.String({qualifiedName: "STRING"});
    let temp77 = new abap.types.UTCLong();
    let temp59 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    abap_date.set(new abap.types.String().set(`"20121221"`));
    abap.statements.clear(temp75);
    await abap.statements.cast(temp57, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp75})));
    element_description.set(temp57);
    exp_json.set(new abap.types.String().set(`2012-12-21`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_date_year.set(new abap.types.String().set(`"2012"`));
    exp_json.set(new abap.types.String().set(`2012`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date_year, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_date_year_month.set(new abap.types.String().set(`"201212"`));
    exp_json.set(new abap.types.String().set(`2012-12`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_date_year_month, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_time.set(new abap.types.String().set(`"201500"`));
    abap.statements.clear(temp76);
    await abap.statements.cast(temp58, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp76})));
    element_description.set(temp58);
    exp_json.set(new abap.types.String().set(`20:15:00`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_time, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_time_incomplete.set(new abap.types.String().set(`"2015"`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_time_incomplete, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
    abap_utclong.set(new abap.types.String().set(`"2012-12-21T23:59:59.9999999"`));
    abap.statements.clear(temp77);
    await abap.statements.cast(temp59, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: temp77})));
    element_description.set(temp59);
    exp_json.set(new abap.types.String().set(`2012-12-21T23:59:59+00:00`));
    act_json.set((await this.cut.get().date_time_from_abap_to_json({date_time_abap: abap_utclong, element_description: element_description})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: exp_json, act: act_json});
  }
  async validate_invalid_json_schema() {
    let temp78 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp60 = new abap.types.String({qualifiedName: "STRING"});
    let temp61 = new abap.types.String({qualifiedName: "STRING"});
    let temp62 = new abap.types.String({qualifiedName: "STRING"});
    let invalid_json_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG", RTTIName: "\\INTERFACE=ZIF_AFF_LOG"});
    let is_valid = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    abap.statements.clear(temp78);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp78});
    temp60.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp60, table: temp78});
    temp61.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp61, table: temp78});
    temp62.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp62, table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "name": {`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 30`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": {`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 60`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp78});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp78});
    invalid_json_schema.set(temp78);
    log.set((await this.cut.get().zif_aff_writer$get_log()));
    is_valid.set((await this.cut.get().zif_aff_writer$validate({source: invalid_json_schema, log: log})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_false({act: is_valid});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_true({act: (await log.get().zif_aff_log$has_messages())});
  }
  async validate_valid_json_schema() {
    let temp80 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp63 = new abap.types.String({qualifiedName: "STRING"});
    let temp64 = new abap.types.String({qualifiedName: "STRING"});
    let temp65 = new abap.types.String({qualifiedName: "STRING"});
    let invalid_json_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG", RTTIName: "\\INTERFACE=ZIF_AFF_LOG"});
    let is_valid = new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"});
    abap.statements.clear(temp80);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp80});
    temp63.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp63, table: temp80});
    temp64.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp64, table: temp80});
    temp65.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer.schema_id)}",`));
    abap.statements.insertInternal({data: temp65, table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "name": {`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 30`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": {`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 60`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp80});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp80});
    invalid_json_schema.set(temp80);
    log.set((await this.cut.get().zif_aff_writer$get_log()));
    is_valid.set((await this.cut.get().zif_aff_writer$validate({source: invalid_json_schema, log: log})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_true({act: is_valid});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_false({act: (await log.get().zif_aff_log$has_messages())});
  }
  async multiple_of_warning() {
    let temp82 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_MULTIPLE_OF_WARNING-INTEGER"}), "integer_with_multiple": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_MULTIPLE_OF_WARNING-INTEGER_WITH_MULTIPLE"}), "packed_with_multiple": new abap.types.Packed({length: 4, decimals: 1, qualifiedName: "zcl_aff_test_types=>structure_multiple_of_warning-packed_with_multiple"})}, "zcl_aff_test_types=>structure_multiple_of_warning", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp83 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG", RTTIName: "\\INTERFACE=ZIF_AFF_LOG"});
    abap.statements.clear(temp82);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp82})));
    abap.statements.clear(temp83);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$comment": "This file is autogenerated, do not edit manually, see https://github.com/SAP/abap-file-formats for more information.",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$schema": "https://json-schema.org/draft/2020-12/schema",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "$id": "schema/id.json",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "Structure With Multiple Of Warning",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "This is a structure with not allowed multiple of value",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "object",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "properties": {`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "integer": {`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Integer With Maximum",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "Integer with maximum",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "integer",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "minimum": -2147483648,`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "maximum": 10`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "integerWithMultiple": {`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Integer With Given Multiple",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "Integer with given multiple",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "integer",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "exclusiveMinimum": 0,`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "maximum": 99999,`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "multipleOf": 1`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "packedWithMultiple": {`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Packed Number With Multiple",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "Packed number with given multiple",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "number",`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "exclusiveMinimum": 0,`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "maximum": 999999.9`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "additionalProperties": false`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp83});
    abap.statements.insertInternal({data: new abap.types.String().set(``), table: temp83});
    exp_schema.set(temp83);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg129, exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.Character(50).set('STRUCTURE_MULTIPLE_OF_WARNING-PACKED_WITH_MULTIPLE')});
  }
}
abap.Classes['CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER'] = ltcl_json_writer;
ltcl_json_writer.schema_id = new abap.types.String({qualifiedName: "STRING"});
ltcl_json_writer.schema_id.set('schema/id.json');

class ltcl_json_writer_abap_doc {
  static INTERNAL_TYPE = 'CLAS';
  static INTERNAL_NAME = 'CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER_ABAP_DOC';
  static IMPLEMENTED_INTERFACES = [];
  static ATTRIBUTES = {"CUT": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA", RTTIName: "\\CLASS=ZCL_AFF_WRITER_JSON_SCHEMA"});}, "visibility": "I", "is_constant": " ", "is_class": " "},
  "TEST_GENERATOR": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_GENERATOR", RTTIName: "\\INTERFACE=ZIF_AFF_GENERATOR"});}, "visibility": "I", "is_constant": " ", "is_class": " "},
  "LOG": {"type": () => {return new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG", RTTIName: "\\INTERFACE=ZIF_AFF_LOG"});}, "visibility": "I", "is_constant": " ", "is_class": " "},
  "SCHEMA_ID": {"type": () => {return new abap.types.String({qualifiedName: "STRING"});}, "visibility": "I", "is_constant": "X", "is_class": "X"}};
  static METHODS = {"SETUP": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_DIFFERENT_ENUM": {"visibility": "I", "parameters": {}},
  "STANDARD_TABLE": {"visibility": "I", "parameters": {}},
  "NESTED_STRUCTURE": {"visibility": "I", "parameters": {}},
  "SIMPLE_STRUCTURE": {"visibility": "I", "parameters": {}},
  "SIMPLE_STRUCTURE_SINGLE_FIELD": {"visibility": "I", "parameters": {}},
  "SIMPLE_STRUCTURE_TWO_FIELDS": {"visibility": "I", "parameters": {}},
  "STRING_ELEMENT": {"visibility": "I", "parameters": {}},
  "SIMPLE_STRUCTURE_DOLLAR": {"visibility": "I", "parameters": {}},
  "COMPLEX_TYPE_WITH_ENUM": {"visibility": "I", "parameters": {}},
  "NUMBER_ELEMENT": {"visibility": "I", "parameters": {}},
  "DATE_TIME_ELEMENT": {"visibility": "I", "parameters": {}},
  "NESTED_NESTED_STRUCTURE": {"visibility": "I", "parameters": {}},
  "NESTED_NESTED_SIMPLE": {"visibility": "I", "parameters": {}},
  "TABLE_IN_NESTED_STRU_WITH_AD": {"visibility": "I", "parameters": {}},
  "NESTES_TABLE_WITH_AD": {"visibility": "I", "parameters": {}},
  "FORMAT_VERSION": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_TABLE": {"visibility": "I", "parameters": {}},
  "NUMERICAL_TEXT_FIELD": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_NUMBERS": {"visibility": "I", "parameters": {}},
  "STRUCTURE_DIFFERENT_DEFAULT": {"visibility": "I", "parameters": {}},
  "NESTED_STRUC_WITH_DEFAULT": {"visibility": "I", "parameters": {}},
  "SIMPLE_TABLE_WITH_CALLBACKCLAS": {"visibility": "I", "parameters": {}},
  "STRUCT_WITH_TABLE_CALLBACK": {"visibility": "I", "parameters": {}},
  "ELEMENT_WITH_CALLBACKCLAS": {"visibility": "I", "parameters": {}},
  "ELEMENT_IN_STRUCTURE_CALLBACK": {"visibility": "I", "parameters": {}},
  "TABLE_OF_STRUC_WITH_CALLBACK": {"visibility": "I", "parameters": {}},
  "TABLE_WITH_CALL_OF_STRUC": {"visibility": "I", "parameters": {}},
  "NESTED_TABLE_WITH_CALLBACK": {"visibility": "I", "parameters": {}},
  "STRUC_WITH_STRUC_CALLBACK": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_WRONG_ENUM_LINK": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_WRONG_DEFAULT": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_WRONG_CALLBACK": {"visibility": "I", "parameters": {}},
  "HASHED_TABLE": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_TABLES": {"visibility": "I", "parameters": {}},
  "STRUCTURE_NO_TITLE_DESCR": {"visibility": "I", "parameters": {}},
  "ELEMENT_NO_TITLE_DESCR": {"visibility": "I", "parameters": {}},
  "TABLE_NO_TITLE_DESCR": {"visibility": "I", "parameters": {}},
  "TITLE_AND_DESC_ESCAPED": {"visibility": "I", "parameters": {}},
  "NUMBER_ELEMENT_DEFAULT": {"visibility": "I", "parameters": {}},
  "UNKNOWN_ANNOTATION": {"visibility": "I", "parameters": {}},
  "UNKNOWN_ABAP_DOC_TAG": {"visibility": "I", "parameters": {}},
  "TYPE_OF_ENUMTYPE_AND_CO_DIFFER": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_INCLUDE": {"visibility": "I", "parameters": {}},
  "DESCRIPTION_TOO_LONG": {"visibility": "I", "parameters": {}},
  "STRUCTURE_WITH_DEFAULT_PROBLEM": {"visibility": "I", "parameters": {}},
  "GET_EXTREMA_INTEGER": {"visibility": "I", "parameters": {}},
  "GET_EXTREMA_DECFLOAT16": {"visibility": "I", "parameters": {}},
  "GET_EXTREMA_FTYPE": {"visibility": "I", "parameters": {}},
  "GET_EXTREMA_PACKED": {"visibility": "I", "parameters": {}},
  "GET_EXTREMA_INTEGER1": {"visibility": "I", "parameters": {}},
  "CALCULATE_MAX_LENGTH": {"visibility": "I", "parameters": {}},
  "ORIGINAL_DESCRIPTION": {"visibility": "I", "parameters": {}},
  "STRUC_WITH_OWN_ENUM_VALUES": {"visibility": "I", "parameters": {}},
  "CONTENT_ENCODED_INTEGER": {"visibility": "I", "parameters": {}},
  "CONTENT_ENCODING_UNKNOWN": {"visibility": "I", "parameters": {}},
  "CONTENT_ENCODING": {"visibility": "I", "parameters": {}},
  "CONTENT_MEDIA_TYPE_INTEGER": {"visibility": "I", "parameters": {}},
  "CONTENT_MEDIA_TYPE_STRING": {"visibility": "I", "parameters": {}},
  "ENCODING_TYPE_NEXT_LEVEL": {"visibility": "I", "parameters": {}}};
  constructor() {
    this.me = new abap.types.ABAPObject();
    this.me.set(this);
    this.cut = new abap.types.ABAPObject({qualifiedName: "ZCL_AFF_WRITER_JSON_SCHEMA", RTTIName: "\\CLASS=ZCL_AFF_WRITER_JSON_SCHEMA"});
    this.test_generator = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_GENERATOR", RTTIName: "\\INTERFACE=ZIF_AFF_GENERATOR"});
    this.log = new abap.types.ABAPObject({qualifiedName: "ZIF_AFF_LOG", RTTIName: "\\INTERFACE=ZIF_AFF_LOG"});
    this.schema_id = ltcl_json_writer_abap_doc.schema_id;
  }
  async constructor_(INPUT) {
    if (super.constructor_) { await super.constructor_(INPUT); }
    return this;
  }
  async setup() {
    this.cut.set(await (new abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA']()).constructor_({schema_id: ltcl_json_writer_abap_doc.schema_id}));
    this.test_generator.set(await (new abap.Classes['ZCL_AFF_GENERATOR']()).constructor_({writer: this.cut}));
  }
  async number_element_default() {
    let temp85 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>DEFAULT_LINK"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp86 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp66 = new abap.types.String({qualifiedName: "STRING"});
    let temp67 = new abap.types.String({qualifiedName: "STRING"});
    let temp68 = new abap.types.String({qualifiedName: "STRING"});
    let temp87 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp85);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp85})));
    abap.statements.clear(temp86);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp86});
    temp66.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp66, table: temp86});
    temp67.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp67, table: temp86});
    temp68.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp68, table: temp86});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Default type does not match constant type",`), table: temp86});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "integer",`), table: temp86});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minimum": -2147483648,`), table: temp86});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maximum": 2147483647`), table: temp86});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp86});
    abap.statements.insertInternal({data: temp87, table: temp86});
    exp_schema.set(temp86);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Type of constant CO_TEST does not match type of DEFAULT_LINK`), exp_component_name: new abap.types.String().set(`DEFAULT_LINK`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async original_description() {
    let temp88 = new abap.types.Structure({"original_language": new abap.types.Character(1, {"qualifiedName":"zcl_aff_test_types=>ty_original_language","conversionExit":"ISOLA"})}, "zcl_aff_test_types=>ty_header_60_src", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp89 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp69 = new abap.types.String({qualifiedName: "STRING"});
    let temp70 = new abap.types.String({qualifiedName: "STRING"});
    let temp71 = new abap.types.String({qualifiedName: "STRING"});
    let temp90 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp88);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp88})));
    abap.statements.clear(temp89);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp89});
    temp69.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp69, table: temp89});
    temp70.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp70, table: temp89});
    temp71.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp71, table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "properties": {`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "originalLanguage": {`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Original Language",`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "Original language of the ABAP object",`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "string",`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "minLength": 2`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "additionalProperties": false`), table: temp89});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp89});
    abap.statements.insertInternal({data: temp90, table: temp89});
    exp_schema.set(temp89);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async type_of_enumtype_and_co_differ() {
    let temp91 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>ENUM"});
    try {
      abap.statements.clear(temp91);
      await this.test_generator.get().zif_aff_generator$generate_type({data: temp91});
      await abap.Classes['CL_ABAP_UNIT_ASSERT'].fail();
    } catch (e) {
      if ((abap.Classes['ZCX_AFF_TOOLS'] && e instanceof abap.Classes['ZCX_AFF_TOOLS'])) {
      } else {
        throw e;
      }
    }
  }
  async unknown_annotation() {
    let temp92 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>UNKNOWN_ANNOTATION"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp93 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp72 = new abap.types.String({qualifiedName: "STRING"});
    let temp73 = new abap.types.String({qualifiedName: "STRING"});
    let temp74 = new abap.types.String({qualifiedName: "STRING"});
    let temp94 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp92);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp92})));
    abap.statements.clear(temp93);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp93});
    temp72.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp72, table: temp93});
    temp73.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp73, table: temp93});
    temp74.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp74, table: temp93});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string"`), table: temp93});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp93});
    abap.statements.insertInternal({data: temp94, table: temp93});
    exp_schema.set(temp93);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $hiddenabc is unknown`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`UNKNOWN_ANNOTATION`)});
  }
  async content_encoded_integer() {
    let temp95 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>CONTENT_ENCODED_INTEGER"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp96 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp75 = new abap.types.String({qualifiedName: "STRING"});
    let temp76 = new abap.types.String({qualifiedName: "STRING"});
    let temp77 = new abap.types.String({qualifiedName: "STRING"});
    let temp97 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp95);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp95})));
    abap.statements.clear(temp96);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp96});
    temp75.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp75, table: temp96});
    temp76.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp76, table: temp96});
    temp77.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp77, table: temp96});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "integer",`), table: temp96});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minimum": -2147483648,`), table: temp96});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maximum": 2147483647`), table: temp96});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp96});
    abap.statements.insertInternal({data: temp97, table: temp96});
    exp_schema.set(temp96);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Only elements of character-like type can have annotation $contentEncoding or $contentMediaType`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`CONTENT_ENCODED_INTEGER`)});
  }
  async content_encoding_unknown() {
    let temp98 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>UNKNOWN_CONTENT_ENCODED_STRING"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp99 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp78 = new abap.types.String({qualifiedName: "STRING"});
    let temp79 = new abap.types.String({qualifiedName: "STRING"});
    let temp80 = new abap.types.String({qualifiedName: "STRING"});
    let temp100 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp98);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp98})));
    abap.statements.clear(temp99);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp99});
    temp78.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp78, table: temp99});
    temp79.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp79, table: temp99});
    temp80.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp80, table: temp99});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string"`), table: temp99});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp99});
    abap.statements.insertInternal({data: temp100, table: temp99});
    exp_schema.set(temp99);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`The content encoding is unknown`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`UNKNOWN_CONTENT_ENCODED_STRING`)});
  }
  async content_encoding() {
    let temp101 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>CONTENT_ENCODED_STRING"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp102 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp81 = new abap.types.String({qualifiedName: "STRING"});
    let temp82 = new abap.types.String({qualifiedName: "STRING"});
    let temp83 = new abap.types.String({qualifiedName: "STRING"});
    let temp103 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp101);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp101})));
    abap.statements.clear(temp102);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp102});
    temp81.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp81, table: temp102});
    temp82.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp82, table: temp102});
    temp83.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp83, table: temp102});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp102});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "contentEncoding": "base64"`), table: temp102});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp102});
    abap.statements.insertInternal({data: temp103, table: temp102});
    exp_schema.set(temp102);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async content_media_type_string() {
    let temp104 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>CONTENT_MEDIA_TYPE_STRING"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp105 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp84 = new abap.types.String({qualifiedName: "STRING"});
    let temp85 = new abap.types.String({qualifiedName: "STRING"});
    let temp86 = new abap.types.String({qualifiedName: "STRING"});
    let temp106 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp104);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp104})));
    abap.statements.clear(temp105);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp105});
    temp84.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp84, table: temp105});
    temp85.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp85, table: temp105});
    temp86.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp86, table: temp105});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp105});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "contentMediaType": "text/html"`), table: temp105});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp105});
    abap.statements.insertInternal({data: temp106, table: temp105});
    exp_schema.set(temp105);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async content_media_type_integer() {
    let temp107 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>CONTENT_MEDIA_TYPE_INTEGER"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp108 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp87 = new abap.types.String({qualifiedName: "STRING"});
    let temp88 = new abap.types.String({qualifiedName: "STRING"});
    let temp89 = new abap.types.String({qualifiedName: "STRING"});
    let temp109 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp107);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp107})));
    abap.statements.clear(temp108);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp108});
    temp87.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp87, table: temp108});
    temp88.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp88, table: temp108});
    temp89.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp89, table: temp108});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "integer",`), table: temp108});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minimum": -2147483648,`), table: temp108});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maximum": 2147483647`), table: temp108});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp108});
    abap.statements.insertInternal({data: temp109, table: temp108});
    exp_schema.set(temp108);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Only elements of character-like type can have annotation $contentEncoding or $contentMediaType`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`CONTENT_MEDIA_TYPE_INTEGER`)});
  }
  async encoding_type_next_level() {
    let temp110 = new abap.types.Structure({"component": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MEDIA_TYPE_CONTENT_ECODING"})}, "zcl_aff_test_types=>struc_with_type_encoding", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp111 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp90 = new abap.types.String({qualifiedName: "STRING"});
    let temp91 = new abap.types.String({qualifiedName: "STRING"});
    let temp92 = new abap.types.String({qualifiedName: "STRING"});
    let temp112 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp110);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp110})));
    abap.statements.clear(temp111);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp111});
    temp90.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp90, table: temp111});
    temp91.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp91, table: temp111});
    temp92.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp92, table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "component": {`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string",`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "contentEncoding": "base64",`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "contentMediaType": "text/html"`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp111});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp111});
    abap.statements.insertInternal({data: temp112, table: temp111});
    exp_schema.set(temp111);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
  }
  async unknown_abap_doc_tag() {
    let temp113 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>DESCRIPTION_NOT_FOUND"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp114 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp93 = new abap.types.String({qualifiedName: "STRING"});
    let temp94 = new abap.types.String({qualifiedName: "STRING"});
    let temp95 = new abap.types.String({qualifiedName: "STRING"});
    let temp115 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp113);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp113})));
    abap.statements.clear(temp114);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp114});
    temp93.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp93, table: temp114});
    temp94.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp94, table: temp114});
    temp95.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp95, table: temp114});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "title",`), table: temp114});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "description <p class=\\"shorttext2\\">Title</p>",`), table: temp114});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string"`), table: temp114});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp114});
    abap.statements.insertInternal({data: temp115, table: temp114});
    exp_schema.set(temp114);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async title_and_desc_escaped() {
    let temp116 = new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>num_text1"});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp117 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp96 = new abap.types.String({qualifiedName: "STRING"});
    let temp97 = new abap.types.String({qualifiedName: "STRING"});
    let temp98 = new abap.types.String({qualifiedName: "STRING"});
    let temp118 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp116);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp116})));
    abap.statements.clear(temp117);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp117});
    temp96.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp96, table: temp117});
    temp97.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp97, table: temp117});
    temp98.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp98, table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Test title \\"\\\\",`), table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Test description \\"\\\\",`), table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 4, `), table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "pattern": "^[0-9]+$"`), table: temp117});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp117});
    abap.statements.insertInternal({data: temp118, table: temp117});
    exp_schema.set(temp117);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async format_version() {
    let temp119 = new abap.types.Structure({"format_version": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_FORMAT_VERSION-FORMAT_VERSION"}), "field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_FORMAT_VERSION-FIELD1"})}, "zcl_aff_test_types=>ty_format_version", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp120 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp99 = new abap.types.String({qualifiedName: "STRING"});
    let temp100 = new abap.types.String({qualifiedName: "STRING"});
    let temp101 = new abap.types.String({qualifiedName: "STRING"});
    let temp121 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp119);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp119})));
    abap.statements.clear(temp120);
    abap.statements.insertInternal({data: new abap.types.String().set(`   {`), table: temp120});
    temp99.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp99, table: temp120});
    temp100.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp100, table: temp120});
    temp101.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp101, table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "title": "Constant With Field Format Version",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "description": "Constant with field format_version",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "type": "object",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "properties": {`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "formatVersion": {`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "ABAP File Format Version",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "The ABAP file format version",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "const": "1"`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "field1": {`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Other Field",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Other field",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "integer",`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minimum": -2147483648,`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "maximum": 2147483647`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     },`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "additionalProperties": false`), table: temp120});
    abap.statements.insertInternal({data: new abap.types.String().set(`   }`), table: temp120});
    abap.statements.insertInternal({data: temp121, table: temp120});
    exp_schema.set(temp120);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async number_element() {
    let temp122 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp123 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp102 = new abap.types.String({qualifiedName: "STRING"});
    let temp103 = new abap.types.String({qualifiedName: "STRING"});
    let temp104 = new abap.types.String({qualifiedName: "STRING"});
    let temp124 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp122);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp122})));
    abap.statements.clear(temp123);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp123});
    temp102.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp102, table: temp123});
    temp103.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp103, table: temp123});
    temp104.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp104, table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myInteger",`), table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A simple Integer",`), table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "integer",`), table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minimum": -2147483648,`), table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maximum": 2147483647`), table: temp123});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp123});
    abap.statements.insertInternal({data: temp124, table: temp123});
    exp_schema.set(temp123);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async string_element() {
    let temp125 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp126 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp105 = new abap.types.String({qualifiedName: "STRING"});
    let temp106 = new abap.types.String({qualifiedName: "STRING"});
    let temp107 = new abap.types.String({qualifiedName: "STRING"});
    let temp127 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp125);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp125})));
    abap.statements.clear(temp126);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp126});
    temp105.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp105, table: temp126});
    temp106.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp106, table: temp126});
    temp107.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp107, table: temp126});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myStringName",`), table: temp126});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a string",`), table: temp126});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp126});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 3`), table: temp126});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp126});
    abap.statements.insertInternal({data: temp127, table: temp126});
    exp_schema.set(temp126);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async date_time_element() {
    let temp128 = new abap.types.Date({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_DATE"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp129 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp108 = new abap.types.String({qualifiedName: "STRING"});
    let temp109 = new abap.types.String({qualifiedName: "STRING"});
    let temp110 = new abap.types.String({qualifiedName: "STRING"});
    let temp130 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp128);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp128})));
    abap.statements.clear(temp129);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp129});
    temp108.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp108, table: temp129});
    temp109.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp109, table: temp129});
    temp110.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp110, table: temp129});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Date",`), table: temp129});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a date",`), table: temp129});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp129});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "format" :"date-time"`), table: temp129});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp129});
    abap.statements.insertInternal({data: temp130, table: temp129});
    exp_schema.set(temp129);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure() {
    let temp131 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp132 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp111 = new abap.types.String({qualifiedName: "STRING"});
    let temp112 = new abap.types.String({qualifiedName: "STRING"});
    let temp113 = new abap.types.String({qualifiedName: "STRING"});
    let temp133 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp131);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp131})));
    abap.statements.clear(temp132);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp132});
    temp111.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp111, table: temp132});
    temp112.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp112, table: temp132});
    temp113.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp113, table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySimpleStructure",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a simple structure",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "myFirstElement": {`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "First Element",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the first element",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minLength": 4`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "mySecondElement": {`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Second Element",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the second element",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp132});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp132});
    abap.statements.insertInternal({data: temp133, table: temp132});
    exp_schema.set(temp132);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure_single_field() {
    let temp134 = new abap.types.Structure({"foo_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"})}, "zcl_aff_test_types=>my_structure_single", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp135 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp114 = new abap.types.String({qualifiedName: "STRING"});
    let temp115 = new abap.types.String({qualifiedName: "STRING"});
    let temp116 = new abap.types.String({qualifiedName: "STRING"});
    let temp136 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp134);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp134})));
    abap.statements.clear(temp135);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp135});
    temp114.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp114, table: temp135});
    temp115.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp115, table: temp135});
    temp116.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp116, table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySimpleStructure",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a simple structure",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "fooElement": {`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Foo Element",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the first element",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minLength": 4`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp135});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp135});
    abap.statements.insertInternal({data: temp136, table: temp135});
    exp_schema.set(temp135);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_structure_two_fields() {
    let temp137 = new abap.types.Structure({"foo1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE_TWO-FOO1"}), "foo2": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE_TWO-FOO2"})}, "zcl_aff_test_types=>my_structure_two", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp138 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp117 = new abap.types.String({qualifiedName: "STRING"});
    let temp118 = new abap.types.String({qualifiedName: "STRING"});
    let temp119 = new abap.types.String({qualifiedName: "STRING"});
    let temp139 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp137);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp137})));
    abap.statements.clear(temp138);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp138});
    temp117.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp117, table: temp138});
    temp118.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp118, table: temp138});
    temp119.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp119, table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a two field structure",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "foo1": {`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "foo1 element",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "foo2": {`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "foo2 element",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp138});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp138});
    abap.statements.insertInternal({data: temp139, table: temp138});
    exp_schema.set(temp138);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async simple_structure_dollar() {
    let temp140 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE2-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure2", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp141 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp120 = new abap.types.String({qualifiedName: "STRING"});
    let temp121 = new abap.types.String({qualifiedName: "STRING"});
    let temp122 = new abap.types.String({qualifiedName: "STRING"});
    let temp142 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp140);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp140})));
    abap.statements.clear(temp141);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp141});
    temp120.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp120, table: temp141});
    temp121.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp121, table: temp141});
    temp122.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp122, table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySimpleStructure",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a $ simple st",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "myFirstElement": {`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "First Element",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the first element",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maxLength": 3`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "mySecondElement": {`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Second Element",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the second element",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false,`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "myFirstElement" `), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ]`), table: temp141});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp141});
    abap.statements.insertInternal({data: temp142, table: temp141});
    exp_schema.set(temp141);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $ructure is unknown`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`MY_STRUCTURE2`)});
  }
  async nested_structure() {
    let temp143 = new abap.types.Structure({"nested_struc": new abap.types.Structure({"my_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_NESTED_STRUCTURE-MY_ELEMENT"})}, "zcl_aff_test_types=>my_nested_structure", undefined, {}, {}), "my_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE3-MY_ELEMENT"})}, "zcl_aff_test_types=>my_structure3", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp144 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp123 = new abap.types.String({qualifiedName: "STRING"});
    let temp124 = new abap.types.String({qualifiedName: "STRING"});
    let temp125 = new abap.types.String({qualifiedName: "STRING"});
    let temp145 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp143);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp143})));
    abap.statements.clear(temp144);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp144});
    temp123.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp123, table: temp144});
    temp124.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp124, table: temp144});
    temp125.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp125, table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myStructure",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a complex structure",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "nestedStruc": {`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "nestedStruc",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the nested structure",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "object",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "properties": {`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "myElement": {`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "title": "myElementComponente",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "description": "This is a string element",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "type": "string"`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`                }`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            },`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "additionalProperties": false`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "myElement": {`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "title": "My Element",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "description": "This is my element",`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "type": "string"`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false,`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [ `), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "myElement" `), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ]`), table: temp144});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp144});
    abap.statements.insertInternal({data: temp145, table: temp144});
    exp_schema.set(temp144);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async standard_table() {
    let temp146 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>my_standard_table");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp147 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp126 = new abap.types.String({qualifiedName: "STRING"});
    let temp127 = new abap.types.String({qualifiedName: "STRING"});
    let temp128 = new abap.types.String({qualifiedName: "STRING"});
    let temp148 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp146);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp146})));
    abap.statements.clear(temp147);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp147});
    temp126.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp126, table: temp147});
    temp127.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp127, table: temp147});
    temp128.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp128, table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "A Standard Table",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A standard table of myString",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "myStringName",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "This is a string",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string",`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 3`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp147});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp147});
    abap.statements.insertInternal({data: temp148, table: temp147});
    exp_schema.set(temp147);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async hashed_table() {
    let temp149 = abap.types.TableFactory.construct(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"HASHED","isUnique":true,"keyFields":["MY_FIRST_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_hashed_table");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp150 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp129 = new abap.types.String({qualifiedName: "STRING"});
    let temp130 = new abap.types.String({qualifiedName: "STRING"});
    let temp131 = new abap.types.String({qualifiedName: "STRING"});
    let temp151 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp149);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp149})));
    abap.statements.clear(temp150);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp150});
    temp129.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp129, table: temp150});
    temp130.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp130, table: temp150});
    temp131.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp131, table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "A Hashed Table",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A hashed table of my_structure",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "uniqueItems" : true,`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "mySimpleStructure",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "This is a simple structure",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "myFirstElement": {`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "First Element",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is the first element",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "minLength": 4`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }, `), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "mySecondElement": {`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "Second Element",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is the second element",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "integer",`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "minimum": -2147483648,`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "maximum": 2147483647`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`            } `), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp150});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp150});
    abap.statements.insertInternal({data: temp151, table: temp150});
    exp_schema.set(temp150);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_tables() {
    let temp152 = new abap.types.Structure({"first_table": abap.types.TableFactory.construct(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":true,"keyFields":["MY_SECOND_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_sorted_table_unique"), "second_table": abap.types.TableFactory.construct(new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {}), {"withHeader":false,"keyType":"USER","primaryKey":{"name":"primary_key","type":"SORTED","isUnique":false,"keyFields":["MY_SECOND_ELEMENT"]},"secondary":[]}, "zcl_aff_test_types=>my_sorted_table_n_unique")}, "zcl_aff_test_types=>my_structure_with_tables", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp153 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp132 = new abap.types.String({qualifiedName: "STRING"});
    let temp133 = new abap.types.String({qualifiedName: "STRING"});
    let temp134 = new abap.types.String({qualifiedName: "STRING"});
    let temp154 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp152);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp152})));
    abap.statements.clear(temp153);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp153});
    temp132.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp132, table: temp153});
    temp133.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp133, table: temp153});
    temp134.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp134, table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "A Structure With Tables",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A structure with different table types",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "firstTable": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "First Table",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "First table",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "array",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "uniqueItems": true,`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "items": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "mySimpleStructure",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is a simple structure",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "object",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "properties": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "myFirstElement": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "title": "First Element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "description": "This is the first element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "type": "string",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "minLength": 4`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    }, `), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "mySecondElement": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "title": "Second Element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "description": "This is the second element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "type": "integer",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "minimum": -2147483648,`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "maximum": 2147483647`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    } `), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                },`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "additionalProperties": false`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "secondTable": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Second Table",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "Second table",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "array",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "items": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "mySimpleStructure",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is a simple structure",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "object",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "properties": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "myFirstElement": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "title": "First Element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "description": "This is the first element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "type": "string",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "minLength": 4`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    }, `), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "mySecondElement": {`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "title": "Second Element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "description": "This is the second element",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "type": "integer",`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "minimum": -2147483648,`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                        "maximum": 2147483647`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    } `), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                },`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "additionalProperties": false`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp153});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp153});
    abap.statements.insertInternal({data: temp154, table: temp153});
    exp_schema.set(temp153);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_different_enum() {
    let temp155 = new abap.types.Structure({"enum_without_all": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_default": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"})}, "zcl_aff_test_types=>structure_with_different_enum", undefined, {}, {});
    let test = new abap.types.Structure({"enum_without_all": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_default": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"}), "enum_with_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_no_initial"})}, "zcl_aff_test_types=>structure_with_different_enum", undefined, {}, {});
    abap.statements.clear(temp155);
    test.set(temp155);
    await this.test_generator.get().zif_aff_generator$generate_type({data: test});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg127, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_DIFFERENT_ENUM-ENUM_WITHOUT_ALL`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async complex_type_with_enum() {
    let temp156 = new abap.types.Structure({"header": new abap.types.Structure({"description": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>HEADER-DESCRIPTION"}), "original_language": new abap.types.Character(1, {"qualifiedName":"sy-langu","conversionExit":"ISOLA"}), "abap_language_version": new abap.types.Character(1, {"qualifiedName":"zcl_aff_test_types=>language_version"})}, "zcl_aff_test_types=>header", undefined, {}, {}), "class_category": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>ty_class_properties-class_category"})}, "zcl_aff_test_types=>ty_class_properties", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp157 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp135 = new abap.types.String({qualifiedName: "STRING"});
    let temp136 = new abap.types.String({qualifiedName: "STRING"});
    let temp137 = new abap.types.String({qualifiedName: "STRING"});
    let temp158 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp156);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp156})));
    abap.statements.clear(temp157);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp157});
    temp135.set(new abap.types.String().set(`   "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp135, table: temp157});
    temp136.set(new abap.types.String().set(`   "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp136, table: temp157});
    temp137.set(new abap.types.String().set(`   "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp137, table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "title": "Class Properties",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "description": "Class properties",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "type": "object",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "properties": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "header": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "title": "Header",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "description": "The header for an ABAP main object",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "type": "object",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "properties": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "title": "Description",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "description": "Description of the ABAP object",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "type": "string"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "originalLanguage": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Original Language",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Original language of the ABAP object",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minLength": 2`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         },`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "abapLanguageVersion": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "title": "ABAP Language Version",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "description": "ABAP language version",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "type": "string",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "enum": [`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "standard",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "cloudDevelopment"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "enumTitles": [`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "Standard",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "ABAP Cloud Development"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "enumDescriptions": [`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "Standard",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "ABAP cloud development"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "default": "standard"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "additionalProperties": false`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`     },`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "classCategory": {`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "title": "Class Category",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "description": "Class category",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "type": "string",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enum": [`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "general",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "exitClass"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enumTitles": [ `), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "General",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "Exit Class"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enumDescriptions": [ `), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "General",`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "Exit class"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       ],`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "default": "general"`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`   },`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false`), table: temp157});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp157});
    abap.statements.insertInternal({data: temp158, table: temp157});
    exp_schema.set(temp157);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nested_nested_structure() {
    let temp159 = new abap.types.Structure({"field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-FIELD1"}), "field2": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>list-field2"}), "list1": new abap.types.Structure({"element_of_list1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-LIST1-ELEMENT_OF_LIST1"}), "list2": new abap.types.Structure({"element_of_list2": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>LIST-LIST1-LIST2-ELEMENT_OF_LIST2"})}, "zcl_aff_test_types=>list-list1-list2", undefined, {}, {})}, "zcl_aff_test_types=>list-list1", undefined, {}, {}), "field3": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>list-field3"})}, "zcl_aff_test_types=>list", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp160 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp138 = new abap.types.String({qualifiedName: "STRING"});
    let temp139 = new abap.types.String({qualifiedName: "STRING"});
    let temp140 = new abap.types.String({qualifiedName: "STRING"});
    let temp161 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp159);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp159})));
    abap.statements.clear(temp160);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp160});
    temp138.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp138, table: temp160});
    temp139.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp139, table: temp160});
    temp140.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp140, table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "outerStructure", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "ABAP Doc Comment TYPES list first level", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field1": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Outer Element 1",  `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "ABAP Doc field1", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647 `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field2": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Outer Element 2", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "ABAP Doc field2", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "maxLength": 2 `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "list1": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "middleStructure", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "ABAP Doc list second level", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "elementOfList1": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "title": "Middle Element", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "ABAP Doc second level", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647 `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`          }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "list2": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "innerStructure", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "ABAP Doc third level", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "object", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "properties": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "elementOfList2": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "Inner Element", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "ABAP Doc third level", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string" `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`              } `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`             }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "additionalProperties": false, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "required": [ `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "elementOfList2"`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`            ] `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`          } `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "additionalProperties": false, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "required": [ `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "elementOfList1" `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ] `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field3": { `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Outer Element 3", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "ABAP Doc field3",`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 2 `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false, `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field2",`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "list1",`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field3"`), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ] `), table: temp160});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp160});
    abap.statements.insertInternal({data: temp161, table: temp160});
    exp_schema.set(temp160);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nested_nested_simple() {
    let temp162 = new abap.types.Structure({"list1": new abap.types.Structure({"element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>NSIMPLE-LIST1-ELEMENT"})}, "zcl_aff_test_types=>nsimple-list1", undefined, {}, {})}, "zcl_aff_test_types=>nsimple", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp163 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp164 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp162);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp162})));
    abap.statements.clear(temp163);
    abap.statements.insertInternal({data: new abap.types.String().set(` {`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "$comment": "This file is autogenerated, do not edit manually, see https://github.com/SAP/abap-file-formats for more information.",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "$schema": "https://json-schema.org/draft/2020-12/schema",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "$id": "schema/id.json",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "type": "object",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "properties": {`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "list1": {`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "type": "object",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "properties": {`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "element": {`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "title": "Inner Element",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "description": "sdfsdf",`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "type": "string"`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`         }`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "additionalProperties": false,`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "required": [`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "element"`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`       ]`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   },`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "additionalProperties": false`), table: temp163});
    abap.statements.insertInternal({data: new abap.types.String().set(` }`), table: temp163});
    abap.statements.insertInternal({data: temp164, table: temp163});
    exp_schema.set(temp163);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().error});
  }
  async table_in_nested_stru_with_ad() {
    let temp165 = new abap.types.Structure({"field1": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>OUTER_STRUC-FIELD1"}), "inner_struc": new abap.types.Structure({"element_of_inner_struc": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>OUTER_STRUC-INNER_STRUC-ELEMENT_OF_INNER_STRUC"}), "inner_table_var": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>outer_struc-inner_struc-inner_table_var")}, "zcl_aff_test_types=>outer_struc-inner_struc", undefined, {}, {}), "field2": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>outer_struc-field2"})}, "zcl_aff_test_types=>outer_struc", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp166 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp141 = new abap.types.String({qualifiedName: "STRING"});
    let temp142 = new abap.types.String({qualifiedName: "STRING"});
    let temp143 = new abap.types.String({qualifiedName: "STRING"});
    let temp167 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp165);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp165})));
    abap.statements.clear(temp166);
    abap.statements.insertInternal({data: new abap.types.String().set(` { `), table: temp166});
    temp141.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp141, table: temp166});
    temp142.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp142, table: temp166});
    temp143.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp143, table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "outerStructure", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "ABAP Doc Comment TYPES list first level", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field1": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Outer Element1",  `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "ABAP Doc field1 first level", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647 `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "innerStruc": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Inner Structure 1", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Inner structure", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "object", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "properties": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "elementOfInnerStruc": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "title": "Inner Element", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "description": "ABAP Doc element second level", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "type": "integer",`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "minimum": -2147483648, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "maximum": 2147483647 `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`             }, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "innerTableVar": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "title": "inner Table", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "description": "ABAP Doc element second level", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "type": "array", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "items": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`                 "type": "string" `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`                } `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`              } `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`          }, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "additionalProperties": false, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "required": [`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "elementOfInnerStruc",`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "innerTableVar"`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`          ] `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field2": { `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Outer Element2", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "ABAP Doc field2 first level",`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 2 `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false, `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field2"`), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ] `), table: temp166});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp166});
    abap.statements.insertInternal({data: temp167, table: temp166});
    exp_schema.set(temp166);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nestes_table_with_ad() {
    let temp168 = abap.types.TableFactory.construct(abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>nested_table"), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>first_table");
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp169 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp144 = new abap.types.String({qualifiedName: "STRING"});
    let temp145 = new abap.types.String({qualifiedName: "STRING"});
    let temp146 = new abap.types.String({qualifiedName: "STRING"});
    let temp170 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp168);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp168})));
    abap.statements.clear(temp169);
    abap.statements.insertInternal({data: new abap.types.String().set(` { `), table: temp169});
    temp144.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp144, table: temp169});
    temp145.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp145, table: temp169});
    temp146.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp146, table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Outer Table", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is the outer table", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": { `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Inner Table", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "This is the inner Table", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "array", `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "items": { `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string" `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`    } `), table: temp169});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp169});
    abap.statements.insertInternal({data: temp170, table: temp169});
    exp_schema.set(temp169);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_enum_link() {
    let temp171 = new abap.types.Structure({"element_one": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_WRONG_LINK-ELEMENT_ONE"}), "element_two": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category_wrong"})}, "zcl_aff_test_types=>structure_with_wrong_link", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp172 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp147 = new abap.types.String({qualifiedName: "STRING"});
    let temp148 = new abap.types.String({qualifiedName: "STRING"});
    let temp149 = new abap.types.String({qualifiedName: "STRING"});
    let temp173 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp171);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp171})));
    abap.statements.clear(temp172);
    abap.statements.insertInternal({data: new abap.types.String().set(` { `), table: temp172});
    temp147.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp147, table: temp172});
    temp148.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp148, table: temp172});
    temp149.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp149, table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure with Wrong Link", `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a structure with wrong enum_values link", `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "elementOne": { `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "First Element",  `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "First element", `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string"`), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "elementTwo": { `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Second Element",  `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Second element", `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string",`), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 2, `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "pattern": "^[0-9]+$" `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }, `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false `), table: temp172});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp172});
    abap.statements.insertInternal({data: temp173, table: temp172});
    exp_schema.set(temp172);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.Character(83).set('Constant ZCL_AFF_TEST_TYPES=>ENUM_VALUES_WRONG given in ABAP Doc link doesn\'t exist'), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_LINK-ELEMENT_TWO`)});
  }
  async structure_with_table() {
    let temp174 = new abap.types.Structure({"table1": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>string_table"), "structure": new abap.types.Structure({"field": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC-FIELD"})}, "zcl_aff_test_types=>inner_struc", undefined, {}, {}), "table2": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>string_table")}, "zcl_aff_test_types=>structure_with_doc_outside", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp175 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp150 = new abap.types.String({qualifiedName: "STRING"});
    let temp151 = new abap.types.String({qualifiedName: "STRING"});
    let temp152 = new abap.types.String({qualifiedName: "STRING"});
    let temp176 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp174);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp174})));
    abap.statements.clear(temp175);
    abap.statements.insertInternal({data: new abap.types.String().set(`{ `), table: temp175});
    temp150.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp150, table: temp175});
    temp151.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp151, table: temp175});
    temp152.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp152, table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure With ABAP Doc Outside",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Structure with ABAP Doc outside",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "table1": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Table1",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Table1",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "array",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "items": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "type": "string"`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "structure": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Structure",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Structure",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "field": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Field",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "Field",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`          }`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "table2": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Table2",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Table2",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "array",`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "items": {`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "type": "string"`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false, `), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [ `), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "table1" `), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ] `), table: temp175});
    abap.statements.insertInternal({data: new abap.types.String().set(`  }`), table: temp175});
    abap.statements.insertInternal({data: temp176, table: temp175});
    exp_schema.set(temp175);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async numerical_text_field() {
    let temp177 = new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>num_text"});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp178 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp153 = new abap.types.String({qualifiedName: "STRING"});
    let temp154 = new abap.types.String({qualifiedName: "STRING"});
    let temp155 = new abap.types.String({qualifiedName: "STRING"});
    let temp179 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp177);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp177})));
    abap.statements.clear(temp178);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp178});
    temp153.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp153, table: temp178});
    temp154.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp154, table: temp178});
    temp155.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp155, table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Numerical Text Field",`), table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A numerical text field of length 4",`), table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 4, `), table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "pattern": "^[0-9]+$"`), table: temp178});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp178});
    abap.statements.insertInternal({data: temp179, table: temp178});
    exp_schema.set(temp178);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_numbers() {
    let temp180 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_NUMBERS-INTEGER"}), "float": new abap.types.typeTodoDecFloat16Type(), "integer_with_multiple": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_NUMBERS-INTEGER_WITH_MULTIPLE"}), "packed_without_multiple": new abap.types.Packed({length: 4, decimals: 1, qualifiedName: "zcl_aff_test_types=>structure_with_numbers-packed_without_multiple"}), "integer_out": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER_OUTSIDE"}), "integer_out_with_doc": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INTEGER_OUTSIDE"})}, "zcl_aff_test_types=>structure_with_numbers", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp181 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp156 = new abap.types.String({qualifiedName: "STRING"});
    let temp157 = new abap.types.String({qualifiedName: "STRING"});
    let temp158 = new abap.types.String({qualifiedName: "STRING"});
    let temp182 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp180);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp180})));
    abap.statements.clear(temp181);
    abap.statements.insertInternal({data: new abap.types.String().set(`{ `), table: temp181});
    temp156.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp156, table: temp181});
    temp157.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp157, table: temp181});
    temp158.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp158, table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure With Number Types",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a structure with different number types",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "integer": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Integer With Maximum",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Integer with maximum",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum":-2147483648 ,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum":10`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "float": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Float With Minimum And Exclusive Maximum",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Float with minimum and exclusive maximum",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -0.42,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "exclusiveMaximum": 100.9`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "integerWithMultiple": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Integer With Given Multiple",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Integer with given multiple",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "exclusiveMinimum": 0,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 99999,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "multipleOf": 1`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "packedWithoutMultiple": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Packed Number With No Given Multiple",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Packed number with no given multiple",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "exclusiveMinimum": 0,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 999999.9`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "integerOut": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Integer Defined Outside",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Integer defined outside and ABAP Doc number annotation outside",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -25,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "integerOutWithDoc": {`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Integer Defined Outside",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Integer defined outside but with ABAP Doc number annotation here",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648,`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 42 `), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false `), table: temp181});
    abap.statements.insertInternal({data: new abap.types.String().set(`  }`), table: temp181});
    abap.statements.insertInternal({data: temp182, table: temp181});
    exp_schema.set(temp181);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_different_default() {
    let temp183 = new abap.types.Structure({"four_byte_int": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-FOUR_BYTE_INT"}), "eight_byte_int": new abap.types.Integer8({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-EIGHT_BYTE_INT"}), "bin_float": new abap.types.Float({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-BIN_FLOAT"}), "byte_like": new abap.types.Hex({length: 2}), "byte_like2": new abap.types.XString({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-BYTE_LIKE2"}), "decimal_float_16": new abap.types.typeTodoDecFloat16Type(), "decimal_float_34": new abap.types.DecFloat34(), "packed_number": new abap.types.Packed({length: 3, decimals: 2, qualifiedName: "zcl_aff_test_types=>structure_different_default-packed_number"}), "numeric_text": new abap.types.Numc({length: 4, qualifiedName: "zcl_aff_test_types=>structure_different_default-numeric_text"}), "character_text": new abap.types.Character(5, {"qualifiedName":"zcl_aff_test_types=>structure_different_default-character_text"}), "string_text": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-STRING_TEXT"}), "date_field": new abap.types.Date({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-DATE_FIELD"}), "time_field": new abap.types.Time({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-TIME_FIELD"}), "date_time_field": new abap.types.UTCLong({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_DIFFERENT_DEFAULT-DATE_TIME_FIELD"}), "bool_true": new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"}), "bool_false": new abap.types.Character(1, {"qualifiedName":"ABAP_BOOL","ddicName":"ABAP_BOOL"}), "enum_type": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_different_default-enum_type"})}, "zcl_aff_test_types=>structure_different_default", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp184 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp159 = new abap.types.String({qualifiedName: "STRING"});
    let temp160 = new abap.types.String({qualifiedName: "STRING"});
    let temp161 = new abap.types.String({qualifiedName: "STRING"});
    let temp185 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp183);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp183})));
    abap.statements.clear(temp184);
    abap.statements.insertInternal({data: new abap.types.String().set(`    { `), table: temp184});
    temp159.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp159, table: temp184});
    temp160.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp160, table: temp184});
    temp161.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp161, table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure With Default", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Structure to test default checks in simple transformation", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "fourByteInt": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Four Byte Integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Four byte integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647 , `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 5 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "eightByteInt": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Eight Byte Integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Eight byte integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -9223372036854775808, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 9223372036854775807 , `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 55 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "binFloat": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Binary Floating Point Number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Binary floating point number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -1.7976931348623157e308, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 1.7976931348623157e308, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 4.3 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "byteLike": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Byte Like", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Byte like", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 4, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "FFFF" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "byteLike2": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Byte Like2", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Byte like2", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "FF00FF"`), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "decimalFloat16": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Decimal Floating Point Number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Decimal floating point number with 16 places", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -9.999999999999999e384, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 9.999999999999999e384, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 25.26 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "decimalFloat34": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Decimal Floating Point Number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Decimal floating point number with 34 places", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -9.999999999999999999999999999999999e6144, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 9.999999999999999999999999999999999e6144, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 123.05 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "packedNumber": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Packed Number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Packed number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "number", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -999.99, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 999.99 , `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 123.45 `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "numericText": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Numeric Text Field", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Numeric text field", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 4, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "pattern": "^[0-9]+$", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "1067" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "characterText": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Character Text", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Character text", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 5, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "abcde" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "stringText": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "String Text", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "String text", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "Default text" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "dateField": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Date", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Date", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "format": "date-time", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "1972-04-01" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "timeField": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Time", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Time", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "format": "date-time", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "20:15:00" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "dateTimeField": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Date Time", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Date time: No support", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "format": "date-time" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "boolTrue": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Boolean", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Boolean with default abap_true", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "boolean", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": true `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "boolFalse": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Boolean", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Boolean with default abap_false", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "boolean", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": false `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "enumType": { `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Enum Type", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Enum type", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "enum": [ `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "general", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "exitClass" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        ], `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "enumTitles": [ `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "General", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "Exit Class" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        ], `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "enumDescriptions": [ `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "General", `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`          "Exit class" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        ], `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": "exitClass" `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }, `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false `), table: temp184});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp184});
    abap.statements.insertInternal({data: temp185, table: temp184});
    exp_schema.set(temp184);
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation $default for type UTCLONG is not supported`), exp_component_name: new abap.types.String().set(`STRUCTURE_DIFFERENT_DEFAULT-DATE_TIME_FIELD`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async structure_with_default_problem() {
    let temp186 = new abap.types.Structure({"integer": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_DEFAULT_PROBLEM-INTEGER"}), "string_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_DEFAULT_PROBLEM-STRING_ELEMENT"}), "enum_required": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_with_default_problem-enum_required"}), "enum_show_always": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>structure_with_default_problem-enum_show_always"})}, "zcl_aff_test_types=>structure_with_default_problem", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp187 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp162 = new abap.types.String({qualifiedName: "STRING"});
    let temp163 = new abap.types.String({qualifiedName: "STRING"});
    let temp164 = new abap.types.String({qualifiedName: "STRING"});
    let temp188 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp186);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp186})));
    abap.statements.clear(temp187);
    abap.statements.insertInternal({data: new abap.types.String().set(`    { `), table: temp187});
    temp162.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp162, table: temp187});
    temp163.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp163, table: temp187});
    temp164.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp164, table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "title": "Structure With Default",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "description": "Structure with default",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "type": "object",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "properties": {`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "integer": {`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Integer",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Integer",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "integer",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minimum": -2147483648,`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "maximum": 2147483647,`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": 5`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "stringElement": {`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "String Element",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "String element with default value",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": "DefaultString"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enumRequired": {`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Enum Value",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Enum value with default",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enum": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "general",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "exitClass"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumTitles": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Exit Class"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumDescriptions": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Exit class"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": "exitClass"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       },`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enumShowAlways": {`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Enum Value",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Enum value with default",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enum": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "general",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "exitClass"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumTitles": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Exit Class"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumDescriptions": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Exit class"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ],`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": "exitClass"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     },`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "additionalProperties": false,`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "required": [`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "integer",`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "enumRequired"`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`     ]`), table: temp187});
    abap.statements.insertInternal({data: new abap.types.String().set(`   }`), table: temp187});
    abap.statements.insertInternal({data: temp188, table: temp187});
    exp_schema.set(temp187);
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg126, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_DEFAULT_PROBLEM-INTEGER`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async nested_struc_with_default() {
    let temp189 = new abap.types.Structure({"outer_component": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>NESTED_STRUC_WITH_DEFAULT-OUTER_COMPONENT"}), "middle_struc": new abap.types.Structure({"middle_component": new abap.types.Character(4, {"qualifiedName":"zcl_aff_test_types=>middle_struc_with_default-middle_component"}), "inner_struc": new abap.types.Structure({"inner_component": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC_WITH_DEFAULT-INNER_COMPONENT"})}, "zcl_aff_test_types=>inner_struc_with_default", undefined, {}, {})}, "zcl_aff_test_types=>middle_struc_with_default", undefined, {}, {})}, "zcl_aff_test_types=>nested_struc_with_default", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp190 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp165 = new abap.types.String({qualifiedName: "STRING"});
    let temp166 = new abap.types.String({qualifiedName: "STRING"});
    let temp167 = new abap.types.String({qualifiedName: "STRING"});
    let temp191 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp189);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp189})));
    abap.statements.clear(temp190);
    abap.statements.insertInternal({data: new abap.types.String().set(`    { `), table: temp190});
    temp165.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp165, table: temp190});
    temp166.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp166, table: temp190});
    temp167.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp167, table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "title": "Nested Structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "description": "Nested structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "type": "object", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "properties": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "outerComponent": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Outer Component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Outer component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "integer", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minimum": -2147483648, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "maximum": 2147483647 , `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": 10 `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "middleStruc": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Middle Structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Middle structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "object", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "properties": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "middleComponent": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "title": "Middle Component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "description": "Middle component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "type": "string", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "maxLength": 4, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "default": "abcd" `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`           }, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "innerStruc": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "title": "Inner Structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "description": "Inner structure", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "type": "object", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "properties": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`               "innerComponent": { `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`                 "title": "Inner Component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`                 "description": "Inner component", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`                 "type": "string", `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`                 "default": "Default Value" `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`               } `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             }, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "additionalProperties": false `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`           } `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         }, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "additionalProperties": false `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`       } `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }, `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "additionalProperties": false `), table: temp190});
    abap.statements.insertInternal({data: new abap.types.String().set(`   } `), table: temp190});
    abap.statements.insertInternal({data: temp191, table: temp190});
    exp_schema.set(temp190);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_default() {
    let temp192 = new abap.types.Structure({"element_one": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category"}), "element_two": new abap.types.Numc({length: 2, qualifiedName: "zcl_aff_test_types=>category"})}, "zcl_aff_test_types=>structure_with_wrong_default", undefined, {}, {});
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp193 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp168 = new abap.types.String({qualifiedName: "STRING"});
    let temp169 = new abap.types.String({qualifiedName: "STRING"});
    let temp170 = new abap.types.String({qualifiedName: "STRING"});
    let temp194 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp192);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp192})));
    abap.statements.clear(temp193);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp193});
    temp168.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp168, table: temp193});
    temp169.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp169, table: temp193});
    temp170.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp170, table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "title": "Structure With Wrong Default", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "description": "Structure with wrong default", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "type": "object", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "properties": { `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "elementOne": { `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "First Element",`), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "First element", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enum": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "general", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "classicBadi" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumTitles": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "generalCategory", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumDescriptions": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General interface", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Interface definition of a classic BAdI" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ] `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "elementTwo": { `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Second Element", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "Second element", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enum": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "general", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "classicBadi" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumTitles": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "generalCategory", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumDescriptions": [ `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "General interface", `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Interface definition of a classic BAdI" `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ] `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`       } `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }, `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "additionalProperties": false `), table: temp193});
    abap.statements.insertInternal({data: new abap.types.String().set(`   } `), table: temp193});
    abap.statements.insertInternal({data: temp194, table: temp193});
    exp_schema.set(temp193);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.Character(80).set('Component WRONG_COMPONENT of constant ENUM_VALUES in ABAP Doc link doesn\'t exist'), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_DEFAULT-ELEMENT_ONE`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ENUM_VALUES-CLASSIC_BADI`)});
  }
  async element_with_callbackclas() {
    let temp195 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp197 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>SIMPLE_CALLBACK"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp198 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp171 = new abap.types.String({qualifiedName: "STRING"});
    let temp172 = new abap.types.String({qualifiedName: "STRING"});
    let temp173 = new abap.types.String({qualifiedName: "STRING"});
    let temp199 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp195);
    abap.statements.insertInternal({data: new abap.types.String().set(`"title": "myStringName",`), table: temp195});
    abap.statements.insertInternal({data: new abap.types.String().set(`"description": "This is a String",`), table: temp195});
    abap.statements.insertInternal({data: new abap.types.String().set(`"type": "string",`), table: temp195});
    abap.statements.insertInternal({data: new abap.types.String().set(`"maxLength": 3`), table: temp195});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp195);
    abap.statements.clear(temp197);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp197})));
    abap.statements.clear(temp198);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp198});
    temp171.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp171, table: temp198});
    temp172.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp172, table: temp198});
    temp173.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp173, table: temp198});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myStringName",`), table: temp198});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a String",`), table: temp198});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp198});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 3`), table: temp198});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp198});
    abap.statements.insertInternal({data: temp199, table: temp198});
    exp_schema.set(temp198);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async simple_table_with_callbackclas() {
    let temp200 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp202 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp203 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp174 = new abap.types.String({qualifiedName: "STRING"});
    let temp175 = new abap.types.String({qualifiedName: "STRING"});
    let temp176 = new abap.types.String({qualifiedName: "STRING"});
    let temp204 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp200);
    abap.statements.insertInternal({data: new abap.types.String().set(`"title": "my_table",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`"description": "A standard table of strings",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`"type": "array",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`"items": {`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "myStringName",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "This is a String",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "string",`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "maxLength": 3`), table: temp200});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp200});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp200);
    abap.statements.clear(temp202);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp202})));
    abap.statements.clear(temp203);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp203});
    temp174.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp174, table: temp203});
    temp175.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp175, table: temp203});
    temp176.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp176, table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "my_table",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A standard table of strings",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "myStringName",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "This is a String",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string",`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maxLength": 3`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp203});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp203});
    abap.statements.insertInternal({data: temp204, table: temp203});
    exp_schema.set(temp203);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async table_with_call_of_struc() {
    let temp205 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp207 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp208 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp177 = new abap.types.String({qualifiedName: "STRING"});
    let temp178 = new abap.types.String({qualifiedName: "STRING"});
    let temp179 = new abap.types.String({qualifiedName: "STRING"});
    let temp209 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp205);
    abap.statements.insertInternal({data: new abap.types.String().set(`"title": "my_table_callback",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`"description": "A standard table of my_structure",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`"type": "array",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`"items": {`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "mySimpleStructureWithFallback",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "This is a simple structure",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "object",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "properties": {`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "myFirstElement": {`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myStringName",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a String",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minLength": 2`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "mySecondElement": {`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySecondElement",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is the second element",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "integer",`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "minimum": -2147483648,`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maximum": 2147483647`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "additionalProperties": false`), table: temp205});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp205});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp205);
    abap.statements.clear(temp207);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp207})));
    abap.statements.clear(temp208);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp208});
    temp177.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp177, table: temp208});
    temp178.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp178, table: temp208});
    temp179.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp179, table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "my_table_callback",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A standard table of my_structure",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "mySimpleStructureWithFallback",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "This is a simple structure",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "myFirstElement": {`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "myStringName",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is a String",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "minLength": 2`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`            },`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "mySecondElement": {`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "mySecondElement",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is the second element",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "integer",`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "minimum": -2147483648,`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "maximum": 2147483647`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp208});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp208});
    abap.statements.insertInternal({data: temp209, table: temp208});
    exp_schema.set(temp208);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async nested_table_with_callback() {
    let temp210 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp212 = abap.types.TableFactory.construct(abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>my_standard_table"), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_call_of_table");
    let act_schema_co = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp213 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp180 = new abap.types.String({qualifiedName: "STRING"});
    let temp214 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp210);
    abap.statements.insertInternal({data: new abap.types.String().set(`"title": "my_table_of_table_callback", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`"description": "A standard table of my_table", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`"type": "array", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`"items": { `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "nestedTable", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "This is the inner Table", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "array", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "items": { `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "string", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "string", `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string" `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`    } `), table: temp210});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp210});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp210);
    abap.statements.clear(temp212);
    act_schema_co.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp212})));
    abap.statements.clear(temp213);
    abap.statements.insertInternal({data: new abap.types.String().set(` { `), table: temp213});
    temp180.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp180, table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "$schema": "https://json-schema.org/draft/2020-12/schema", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "$id": "schema/id.json", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "my_table_of_table_callback", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A standard table of my_table", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": { `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "nestedTable", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "This is the inner Table", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "array", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "items": { `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "string", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "string", `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string" `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`    } `), table: temp213});
    abap.statements.insertInternal({data: new abap.types.String().set(`  } `), table: temp213});
    abap.statements.insertInternal({data: temp214, table: temp213});
    exp_schema.set(temp213);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema_co, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async table_of_struc_with_callback() {
    let temp215 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp217 = abap.types.TableFactory.construct(new abap.types.Structure({"element_name": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_CALLBACK-ELEMENT_NAME"})}, "zcl_aff_test_types=>structure_callback", undefined, {}, {}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_of_struc_with_callback");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp218 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp181 = new abap.types.String({qualifiedName: "STRING"});
    let temp182 = new abap.types.String({qualifiedName: "STRING"});
    let temp183 = new abap.types.String({qualifiedName: "STRING"});
    let temp219 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp215);
    abap.statements.insertInternal({data: new abap.types.String().set(`"title": "myStructureFall",`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`"description": "myStructure",`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`"type": "object",`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`"properties": {`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "myElement": {`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myElement",`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "myElement",`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string"`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`  }`), table: temp215});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp215});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp215);
    abap.statements.clear(temp217);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp217})));
    abap.statements.clear(temp218);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp218});
    temp181.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp181, table: temp218});
    temp182.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp182, table: temp218});
    temp183.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp183, table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "my_table",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "A standard table of my_structure_with_callback",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "myStructureFall",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "myStructure",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "properties": {`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "myElement": {`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "myElement",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "myElement",`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string"`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp218});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp218});
    abap.statements.insertInternal({data: temp219, table: temp218});
    exp_schema.set(temp218);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async struct_with_table_callback() {
    let temp220 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp222 = new abap.types.Structure({"element_table_callback": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_callback"), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_OF_TABLE_WITH_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>struc_of_table_with_callback", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp223 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp184 = new abap.types.String({qualifiedName: "STRING"});
    let temp185 = new abap.types.String({qualifiedName: "STRING"});
    let temp186 = new abap.types.String({qualifiedName: "STRING"});
    let temp224 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp220);
    abap.statements.insertInternal({data: new abap.types.String().set(`"elementTableCallback": {`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "myTableWithCallback",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "A standard table of strings",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "array",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "items": {`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "myStringName",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a String",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string",`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "maxLength": 3`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`  }`), table: temp220});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp220});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp220);
    abap.statements.clear(temp222);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp222})));
    abap.statements.clear(temp223);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp223});
    temp184.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp184, table: temp223});
    temp185.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp185, table: temp223});
    temp186.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp186, table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySimpleStructure",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a simple structure",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "elementTableCallback": {`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "myTableWithCallback",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "A standard table of strings",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "array",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "items": {`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "title": "myStringName",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "description": "This is a String",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "type": "string",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "maxLength": 3`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "mySecondElement": {`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Second Element",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the second element",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false,`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [ `), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "elementTableCallback" `), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`  ]`), table: temp223});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp223});
    abap.statements.insertInternal({data: temp224, table: temp223});
    exp_schema.set(temp223);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async struc_with_struc_callback() {
    let temp225 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp227 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_IN_STRUC_WITH_CALLBACK-MY_FIRST_ELEMENT"}), "element_structure_callback": new abap.types.Structure({"element_name": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_CALLBACK-ELEMENT_NAME"})}, "zcl_aff_test_types=>structure_callback", undefined, {}, {}), "my_third_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUC_IN_STRUC_WITH_CALLBACK-MY_THIRD_ELEMENT"})}, "zcl_aff_test_types=>struc_in_struc_with_callback", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp228 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp187 = new abap.types.String({qualifiedName: "STRING"});
    let temp188 = new abap.types.String({qualifiedName: "STRING"});
    let temp189 = new abap.types.String({qualifiedName: "STRING"});
    let temp229 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp225);
    abap.statements.insertInternal({data: new abap.types.String().set(`"elementStructureCallback": {`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "myStrucWithCallback",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "A simple structure",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "object",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "properties": {`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "myElement": {`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "element",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "description": "This is a integer",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "integer",`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "minimum": -2147483648,`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "maximum": 2147483647`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  },`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "additionalProperties": false`), table: temp225});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp225});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp225);
    abap.statements.clear(temp227);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp227})));
    abap.statements.clear(temp228);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp228});
    temp187.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp187, table: temp228});
    temp188.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp188, table: temp228});
    temp189.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp189, table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "mySimpleStructure",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a simple structure",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "myFirstElement": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "First Element",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the first element",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string"`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "elementStructureCallback": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "myStrucWithCallback",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "A simple structure",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "object",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "properties": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                "myElement": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "title": "element",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "description": "This is a integer",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "type": "integer",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "minimum": -2147483648,`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                    "maximum": 2147483647`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`                }`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            },`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "additionalProperties": false`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`         },`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "myThirdElement": {`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Third Element",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the third element",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false,`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [ `), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "elementStructureCallback" `), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`  ]`), table: temp228});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp228});
    abap.statements.insertInternal({data: temp229, table: temp228});
    exp_schema.set(temp228);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async element_in_structure_callback() {
    let temp230 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp232 = new abap.types.Structure({"element_callback": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_ELEM_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>structure_with_elem_callback", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp233 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp190 = new abap.types.String({qualifiedName: "STRING"});
    let temp191 = new abap.types.String({qualifiedName: "STRING"});
    let temp192 = new abap.types.String({qualifiedName: "STRING"});
    let temp234 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp230);
    abap.statements.insertInternal({data: new abap.types.String().set(`"elementCallback": {`), table: temp230});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "title": "myStringName",`), table: temp230});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "description": "This is a String",`), table: temp230});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "type": "string",`), table: temp230});
    abap.statements.insertInternal({data: new abap.types.String().set(`  "minLength": 2`), table: temp230});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp230});
    abap.Classes['ZCL_AFF_TEST_TYPES'].subschema.set(temp230);
    abap.statements.clear(temp232);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp232})));
    abap.statements.clear(temp233);
    abap.statements.insertInternal({data: new abap.types.String().set(`{`), table: temp233});
    temp190.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp190, table: temp233});
    temp191.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp191, table: temp233});
    temp192.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp192, table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Simple Structure",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "This is a simple structure",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": {`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "elementCallback": {`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "myStringName",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is a String",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "string",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minLength": 2`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`        },`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "mySecondElement": {`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "title": "Second Element",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "description": "This is the second element",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "type": "integer",`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "minimum": -2147483648,`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "maximum": 2147483647`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`        }`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    },`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "additionalProperties": false,`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "required": [`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "elementCallback"`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`    ]`), table: temp233});
    abap.statements.insertInternal({data: new abap.types.String().set(`}`), table: temp233});
    abap.statements.insertInternal({data: temp234, table: temp233});
    exp_schema.set(temp233);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
  async structure_with_wrong_callback() {
    let temp235 = new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_WRONG_CALLBACK-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>structure_with_wrong_callback", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp236 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp193 = new abap.types.String({qualifiedName: "STRING"});
    let temp194 = new abap.types.String({qualifiedName: "STRING"});
    let temp195 = new abap.types.String({qualifiedName: "STRING"});
    let temp237 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp235);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp235})));
    abap.statements.clear(temp236);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp236});
    temp193.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp193, table: temp236});
    temp194.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp194, table: temp236});
    temp195.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp195, table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "title": "Structure With Wrong Callback", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "description": "Structure with wrong callback", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "type": "object", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "properties": { `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "myFirstElement": { `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "First Element", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "This is the first element", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minLength": 2 `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "mySecondElement": { `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "title": "Second Element",`), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "description": "This is the second element",`), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "integer", `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "minimum": -2147483648, `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "maximum": 4 `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`       } `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }, `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "additionalProperties": false, `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "required": [`), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "myFirstElement"`), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`     ] `), table: temp236});
    abap.statements.insertInternal({data: new abap.types.String().set(`   } `), table: temp236});
    abap.statements.insertInternal({data: temp237, table: temp236});
    exp_schema.set(temp236);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$co_msg106, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_CALLBACK-MY_FIRST_ELEMENT`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Annotation ${abap.templateFormatting(abap.Classes['ZCL_AFF_ABAP_DOC_PARSER'].abap_doc_annotation.get().callback_class)} was used incorrectly`), exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_WRONG_CALLBACK-MY_SECOND_ELEMENT`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async structure_no_title_descr() {
    let temp238 = new abap.types.Structure({"field1": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_NO_TITLE_DESCR-FIELD1"}), "inner_struc": new abap.types.Structure({"inner_field": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>INNER_STRUC_NO_TITLE_DESCR-INNER_FIELD"})}, "zcl_aff_test_types=>inner_struc_no_title_descr", undefined, {}, {}), "inner_table": abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_no_title_descr")}, "zcl_aff_test_types=>structure_no_title_descr", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp239 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp196 = new abap.types.String({qualifiedName: "STRING"});
    let temp197 = new abap.types.String({qualifiedName: "STRING"});
    let temp198 = new abap.types.String({qualifiedName: "STRING"});
    let temp240 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp238);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp238})));
    abap.statements.clear(temp239);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp239});
    temp196.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp196, table: temp239});
    temp197.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp197, table: temp239});
    temp198.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp198, table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "field1": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Only description",`), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string" `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`    }, `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "innerStruc": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "title": "Only Title",`), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "type": "object", `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "properties": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "innerField": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "title": "Inner Field",`), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "description": "Inner field",`), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "type": "integer", `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "minimum": -2147483648, `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "maximum": 2147483647 `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`         } `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       }, `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "additionalProperties": false `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`     }, `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "innerTable": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "type": "array", `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       "items": { `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "string" `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`       } `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`     } `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`   }, `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "additionalProperties": false `), table: temp239});
    abap.statements.insertInternal({data: new abap.types.String().set(` } `), table: temp239});
    abap.statements.insertInternal({data: temp240, table: temp239});
    exp_schema.set(temp239);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-FIELD1`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_STRUC`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_TABLE`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_NO_TITLE_DESCR-INNER_TABLE`)});
  }
  async element_no_title_descr() {
    let temp241 = new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>ELEMENT_NO_TITLE_DESCR"});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp242 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp199 = new abap.types.String({qualifiedName: "STRING"});
    let temp200 = new abap.types.String({qualifiedName: "STRING"});
    let temp201 = new abap.types.String({qualifiedName: "STRING"});
    let temp243 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp241);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp241})));
    abap.statements.clear(temp242);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp242});
    temp199.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp199, table: temp242});
    temp200.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp200, table: temp242});
    temp201.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp201, table: temp242});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "string" `), table: temp242});
    abap.statements.insertInternal({data: new abap.types.String().set(` } `), table: temp242});
    abap.statements.insertInternal({data: temp243, table: temp242});
    exp_schema.set(temp242);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ELEMENT_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`ELEMENT_NO_TITLE_DESCR`)});
  }
  async table_no_title_descr() {
    let temp244 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"name":"primary_key","type":"STANDARD","isUnique":false,"keyFields":[]},"secondary":[]}, "zcl_aff_test_types=>table_no_title_descr");
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp245 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp202 = new abap.types.String({qualifiedName: "STRING"});
    let temp203 = new abap.types.String({qualifiedName: "STRING"});
    let temp204 = new abap.types.String({qualifiedName: "STRING"});
    let temp246 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp244);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp244})));
    abap.statements.clear(temp245);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp245});
    temp202.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp202, table: temp245});
    temp203.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp203, table: temp245});
    temp204.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp204, table: temp245});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "array", `), table: temp245});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "items": {`), table: temp245});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "type": "string" `), table: temp245});
    abap.statements.insertInternal({data: new abap.types.String().set(`    } `), table: temp245});
    abap.statements.insertInternal({data: new abap.types.String().set(` } `), table: temp245});
    abap.statements.insertInternal({data: temp246, table: temp245});
    exp_schema.set(temp245);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TABLE_NO_TITLE_DESCR`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TABLE_NO_TITLE_DESCR`)});
  }
  async structure_with_include() {
    let temp247 = new abap.types.Structure({"first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_INCLUDE_TYPE-FIRST_ELEMENT"}), "second_element": new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {}), "third_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TY_INCLUDE_TYPE-THIRD_ELEMENT"}), "other_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>STRUCTURE_WITH_INCLUDE-OTHER_ELEMENT"}), "other_structure": new abap.types.Structure({"my_first_element": new abap.types.String({qualifiedName: "ZCL_AFF_TEST_TYPES=>MYSTRING"}), "my_second_element": new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>MY_STRUCTURE-MY_SECOND_ELEMENT"})}, "zcl_aff_test_types=>my_structure", undefined, {}, {})}, "zcl_aff_test_types=>structure_with_include", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp248 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp205 = new abap.types.String({qualifiedName: "STRING"});
    let temp206 = new abap.types.String({qualifiedName: "STRING"});
    let temp207 = new abap.types.String({qualifiedName: "STRING"});
    let temp249 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp247);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp247})));
    abap.statements.clear(temp248);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp248});
    temp205.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp205, table: temp248});
    temp206.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp206, table: temp248});
    temp207.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp207, table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure With Include", `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Structure with include", `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "firstElement": { `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "First Element In Include",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string" `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }, `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "secondElement": { `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "mySimpleStructure",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "This is a simple structure",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "type": "object", `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "properties": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "myFirstElement": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "title": "First Element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "description": "This is the first element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "type": "string",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "minLength": 4`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`            },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`            "mySecondElement": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "title": "Second Element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "description": "This is the second element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "type": "integer",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "minimum": -2147483648,`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`              "maximum": 2147483647`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`            }`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "additionalProperties": false`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "thirdElement": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Third Element In Include",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Third element in include",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648,`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647,`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "default": 10`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "otherElement": { `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Other element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "integer",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "minimum": -2147483648,`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "maximum": 2147483647`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "otherStructure": { `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Other structure",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Other Structure",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "object", `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "properties": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "myFirstElement": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "title": "First Element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "description": "This is the first element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "type": "string",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "minLength": 4`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`           },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "mySecondElement": {`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "title": "Second Element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "description": "This is the second element",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "type": "integer",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "minimum": -2147483648,`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`             "maximum": 2147483647`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`           }`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`         },`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "additionalProperties": false`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`      }`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`   }, `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "additionalProperties": false, `), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "required": [`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "firstElement",`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`     "otherElement"`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(`   ]`), table: temp248});
    abap.statements.insertInternal({data: new abap.types.String().set(` } `), table: temp248});
    abap.statements.insertInternal({data: temp249, table: temp248});
    exp_schema.set(temp248);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Title is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`STRUCTURE_WITH_INCLUDE-OTHER_ELEMENT`)});
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description is missing`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info, exp_component_name: new abap.types.String().set(`TY_INCLUDE_TYPE-FIRST_ELEMENT`)});
  }
  async description_too_long() {
    let temp250 = new abap.types.Integer({qualifiedName: "ZCL_AFF_TEST_TYPES=>TYPE_WITH_LONG_DESCRIPTION"});
    abap.statements.clear(temp250);
    await this.test_generator.get().zif_aff_generator$generate_type({data: temp250});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_contains_text({log: this.log, exp_text: new abap.types.String().set(`Description exceeds ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_max_length_of_description)} characters and might be too long`), exp_component_name: new abap.types.String().set(`TYPE_WITH_LONG_DESCRIPTION`), exp_type: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().warning});
  }
  async get_extrema_integer() {
    let val = new abap.types.Integer({qualifiedName: "I"});
    let temp251 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp251, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp251, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-2147483648`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`2147483647`), act: max});
  }
  async get_extrema_decfloat16() {
    let val = new abap.types.typeTodoDecFloat16Type();
    let temp252 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp252, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp252, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-9.999999999999999e384`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`9.999999999999999e384`), act: max});
  }
  async get_extrema_ftype() {
    let val = new abap.types.Float({qualifiedName: "F"});
    let temp253 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp253, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp253, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-1.7976931348623157e308`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`1.7976931348623157e308`), act: max});
  }
  async get_extrema_packed() {
    let val = new abap.types.Packed({length: 14, decimals: 2});
    let temp254 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp254, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp254, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`-9999999999999999999999999.99`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`9999999999999999999999999.99`), act: max});
  }
  async get_extrema_integer1() {
    let val = new abap.types.Integer({qualifiedName: "INT1"});
    let temp255 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max = new abap.types.String({qualifiedName: "STRING"});
    let min = new abap.types.String({qualifiedName: "STRING"});
    await abap.statements.cast(temp255, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: val})));
    await this.cut.get().get_extrema({element_description: temp255, max: max, min: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`0`), act: min});
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: new abap.types.String().set(`255`), act: max});
  }
  async calculate_max_length() {
    let c_length_30 = new abap.types.Character(30, {});
    let temp256 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let max_length = new abap.types.String({qualifiedName: "STRING"});
    let c_length_60 = new abap.types.Character(60, {});
    let temp257 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    let n_length_10 = new abap.types.Numc({length: 10});
    let temp258 = new abap.types.ABAPObject({qualifiedName: "CL_ABAP_ELEMDESCR", RTTIName: "\\CLASS=CL_ABAP_ELEMDESCR"});
    await abap.statements.cast(temp256, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: c_length_30})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp256})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: abap.IntegerFactory.get(30), act: max_length});
    await abap.statements.cast(temp257, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: c_length_60})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp257})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: abap.IntegerFactory.get(60), act: max_length});
    await abap.statements.cast(temp258, (await abap.Classes['CL_ABAP_TYPEDESCR'].describe_by_data({p_data: n_length_10})));
    max_length.set((await this.cut.get().get_max_length({element_description: temp258})));
    await abap.Classes['CL_ABAP_UNIT_ASSERT'].assert_equals({exp: abap.IntegerFactory.get(10), act: max_length});
  }
  async struc_with_own_enum_values() {
    let temp259 = new abap.types.Structure({"enum_component": new abap.types.Character(2, {"qualifiedName":"zcl_aff_test_types=>struc_with_own_enum_values-enum_component"})}, "zcl_aff_test_types=>struc_with_own_enum_values", undefined, {}, {});
    let act_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp260 = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    let temp208 = new abap.types.String({qualifiedName: "STRING"});
    let temp209 = new abap.types.String({qualifiedName: "STRING"});
    let temp210 = new abap.types.String({qualifiedName: "STRING"});
    let temp261 = new abap.types.String({qualifiedName: "STRING"});
    let exp_schema = abap.types.TableFactory.construct(new abap.types.String({qualifiedName: "STRING"}), {"withHeader":false,"keyType":"DEFAULT","primaryKey":{"isUnique":false,"type":"STANDARD","keyFields":[],"name":"primary_key"},"secondary":[]}, "STRING_TABLE");
    abap.statements.clear(temp259);
    act_schema.set((await this.test_generator.get().zif_aff_generator$generate_type({data: temp259})));
    abap.statements.clear(temp260);
    abap.statements.insertInternal({data: new abap.types.String().set(`   { `), table: temp260});
    temp208.set(new abap.types.String().set(`    "$comment": "This file is autogenerated, do not edit manually, see ${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_link_to_repository)} for more information.", `));
    abap.statements.insertInternal({data: temp208, table: temp260});
    temp209.set(new abap.types.String().set(`    "$schema": "${abap.templateFormatting(abap.Classes['ZCL_AFF_WRITER_JSON_SCHEMA'].c_schema_specification)}",`));
    abap.statements.insertInternal({data: temp209, table: temp260});
    temp210.set(new abap.types.String().set(`    "$id": "${abap.templateFormatting(ltcl_json_writer_abap_doc.schema_id)}",`));
    abap.statements.insertInternal({data: temp210, table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "title": "Structure With Overwritten Enum Values", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "description": "Structure with overwritten enum values", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "type": "object", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`    "properties": { `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`      "enumComponent": { `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "title": "Enum Component",`), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "description": "Enum component",`), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`        "type": "string", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enum": [ `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "AAAA", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "BBBB" `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumTitles": [ `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Option 1", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Option 2" `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "enumDescriptions": [ `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Option 1", `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`           "Option 2" `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         ], `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`         "default": "AAAA"`), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`      } `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`   }, `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(`   "additionalProperties": false `), table: temp260});
    abap.statements.insertInternal({data: new abap.types.String().set(` } `), table: temp260});
    abap.statements.insertInternal({data: temp261, table: temp260});
    exp_schema.set(temp260);
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_equals_ignore_spaces({act_data: act_schema, exp_data: exp_schema});
    this.log.set((await this.cut.get().zif_aff_writer$get_log()));
    await abap.Classes['ZCL_AFF_TOOLS_UNIT_TEST_HELPER'].assert_log_has_no_message({log: this.log, message_severity_threshold: abap.Classes['ZIF_AFF_LOG'].zif_aff_log$c_message_type.get().info});
  }
}
abap.Classes['CLAS-ZCL_AFF_WRITER_JSON_SCHEMA-LTCL_JSON_WRITER_ABAP_DOC'] = ltcl_json_writer_abap_doc;
ltcl_json_writer_abap_doc.schema_id = new abap.types.String({qualifiedName: "STRING"});
ltcl_json_writer_abap_doc.schema_id.set('schema/id.json');
export {ltcl_json_writer, ltcl_json_writer_abap_doc};
//# sourceMappingURL=zcl_aff_writer_json_schema.clas.testclasses.mjs.map